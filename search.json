[{"title":"Flutter 打包的坑","url":"/2020/10/09/fc757758.html","content":"\n1. 生产打包后启动白屏，日志报错 没有找到 `libflutter.so`\n   \n   场景：\n   \n   - 执行命令\n     \n     ```bash\n     flutter clean \n     flutter build apk --release --target-platform android-arm\n     ```\n   \n   - 分析：  ![](http://img.bed.bugfix.fun/img/bed/20201009114919.png)\n     \n     发现一个问题，除了 `v7a` 其他的几个目录大小明显不对，这要是找不到 `so` 文件的根本原因\n   \n   - 解决方案\n     \n     在`build.gradle`中指定`abiFilters`即可\n     \n     ```groovy\n     android {\n        // 前略\n     \n        defaultConfig {\n            ndk {\n                //选择要添加的对应 cpu 类型的 .so 库。\n                abiFilters 'armeabi-v7a';\n            }\n        }\n     \n        // 余略\n     }\n     ```\n","tags":["疑难杂症"],"categories":["Flutter"]},{"title":"MacOS 活动监视器表头丢失","url":"/2020/10/08/7bd30fd5.html","content":"\n**原文：**[解决MACOS-活动监视器表头不见了 - 简书](https://www.jianshu.com/p/0a8906f08c3c)\n\n最近遇到一个问题，macOS  的活动监视器表头丢失了，见图\n\n![](http://img.bed.bugfix.fun/img/bed/20201008110050.webp)\n\n1. 解决思路\n   一般这种情况是软件运行出现BUG了，重置一下软件设置就会恢复；\n\n2. 解决手段\n   终端中输入一下代码：\n   \n   ```shell\n    rm -rf ~/Library/Preferences/com.apple.ActivityMonitor.plist\n   ```\n   \n    重启即解决\n","tags":["疑难杂症","macOS"],"categories":["问题记录","转载"]},{"title":"Flutter StatefulWidget组件不刷新问题","url":"/2020/08/11/ed17d827.html","content":"\n#### 问题\n\n一个 `Flutter` 项目中，使用 `provider` 模式管理状态。我在在 `PageView` 里嵌套了 `ListView`。`ListView` 的 `Item` 视图是继承自 `StatefulWiget`。\n\n我在 `model` 里删除 `List` 数据源中的某一个数据，`ListView` 渲染的长度变了，内容却没变。\n\n#### 方案\n\n1. 将 `Item` 的视图改为继承自 `StatelessWidget`\n\n2. 使用 `key`，`flutter`的渲染机制会自动对比新老 key 值，从而刷新。(这一方案类似与 `vue` 中的 `v-bind:key`)\n\n<!--more-->\n\n```dart\nListView.separated(\n  itemCount: model.list.length,\n  itemBuilder: (BuildContext context, int index) => ItemTrain(\n  data: model.list[index],\n  // 关键在这里 ↓\n  key: ValueKey(model.list[index].orderId),\n),\n```\n","tags":["Flutter","问题记录"],"categories":["技术"]},{"title":"Flutter 屏幕适配","url":"/2020/08/06/241223bd.html","content":"\n#### 前言\n\n任何一个前端平台开发无不可避免的都会遇到适配问题。\n\n在 Flutter 中，默认是使用logical pixel逻辑像素的，系统拿到我们设的值，会自动判断在iOS或者Android上对应的尺寸，不用我们强制转换成某一个单位。\n\n但是现在，我们希望可以与设计稿保持一致，所以需要一些解决方案。\n\n<!-- more -->\n\n#### 方案一\n\n直接使用 `flutter_screenutil` 库。\n\n- 跳转  [flutter_screenutil | Flutter Package](https://pub.flutter-io.cn/packages/flutter_screenutil)\n\n- 跳转 [OpenFlutter/flutter_screenutil](https://github.com/OpenFlutter/flutter_screenutil/blob/master/README_CN.md)\n\n#### 方案二\n\n`flutter_screenutil` 是一个优秀的方案，但是写起来有一些模板代码，我希望能有一个轻量 一点的方案。\n\n需要知道以下内容：\n\n1. 新版本 `Flutter SDK` 引入了 `extension` 的机制，可以对 `class` 进行扩展。\n\n2. 在 `Flutter dart:ui` 库下有 `window` 属性，可以通过它来获取屏幕的物理尺寸。\n\n知道了这些 ，就可以开始搞事了。\n\n**核心代码如下**\n\n```dart\nimport 'dart:ui';\n\nclass TLSizeFit {\n  // 1.基本信息\n  static double physicalWidth;\n  static double physicalHeight;\n  static double screenWidth;\n  static double screenHeight;\n  static double dpr;\n  static double statusHeight;\n\n  static double rpx;\n  static double px;\n\n// 这里设置standardSize 为可选属性，如果使用者愿意以非iPhone6为标准，那么你使用时候传入对应的标准即可。这里默认750\n  static void initialize({double standardSize = 750}) {\n    // 1.手机的物理分辨率\n    physicalWidth = window.physicalSize.width;\n    physicalHeight = window.physicalSize.height;\n\n    // 2.获取dpr\n    dpr = window.devicePixelRatio;\n\n    // 3.宽度和高度\n    screenWidth = physicalWidth / dpr;\n    screenHeight = physicalHeight / dpr;\n\n    // 4.状态栏高度\n    statusHeight = window.padding.top / dpr;\n\n    // 5.计算rpx px的大小, iPhone6下 1px = 2rpx\n    rpx = screenWidth / standardSize;\n    px = screenWidth / standardSize * 2;\n  }\n\n  static double setRpx(double size) {\n    return rpx * size;\n  }\n\n  static double setPx(double size) {\n    return px * size;\n  }\n}\n\nextension DoubleFit on double {\n  double get px {\n    return TLSizeFit.setPx(this);\n  }\n\n  double get rpx {\n    return TLSizeFit.setRpx(this);\n  }\n}\n\nextension IntFit on int {\n  double get px {\n    return TLSizeFit.setPx(this.toDouble());\n  }\n\n  double get rpx {\n    return TLSizeFit.setRpx(this.toDouble());\n  }\n}\n```\n\n#### 如何使用\n\n```dart\nclass DemoWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    TLSizeFit.initialize();\n\n    return Container(\n      width: 100.px,\n      height: 100.px,\n      // 余略\n    );\n  }\n}\n```\n","tags":["Flutter","技术方案"],"categories":["技术"]},{"title":"curl 显示上传进度","url":"/2020/08/01/1be0d543.html","content":"\n最近在编写一个分发脚本时，遇到一个小问题，文件较大，上传速度略慢，curl 默认下不展示上传进度，特此记录一下解决方案。\n\n```shell\ncurl \"$api\" \\\n  --progress-bar \\\n  --verbose \\\n  -F \"file=@$full\" \\\n  -F \"uKey=$uKey\" \\\n  -F \"_api_key=$apiKey\" |\n  tee -a \"${LOG_FILE}\" ; test ${PIPESTATUS[0]} -eq 0\n```\n\n说明：\n\n有用的部分是：`curl \"$api\"  --progress-bar`，它告诉`curl`在上传期间显示进度条（而不是默认的“进度表”）。\n\n并且：`| tee -a \"{LOG_FILE}\" ; test {PIPESTATUS[0]} -eq 0` 它将命令的输出附加到日志文件，并将其回显到`stdout`。\n\n `test ${PIPESTATUS[0]} -eq 0`部分使得该行（在bash脚本中）的退出状态与`curl`命令返回的退出代码相同，而不是`tee`命令的退出状态。\n","tags":["bash","集锦"],"categories":["技术"]},{"title":"学习网站收集","url":"/2020/06/17/fe252718.html","content":"\n### 语言学习\n\n#### Java\n\n- [Java工程师成神之路](https://hollischuang.github.io/toBeTopJavaer/)\n- [并发编程网](http://ifeve.com/)\n- [On Java8](https://lingcoder.github.io/OnJava8)\n\n#### Python\n\n- [Python 3.8.3 文档](https://docs.python.org/zh-cn/3/)\n- [PythonTab：Python中文开发者社区门户](https://www.pythontab.com/)\n\n#### Kotlin\n\n- [Kotlin 语言中文站](https://www.kotlincn.net/)\n\n#### Go\n\n- [Go语言标准库文档中文版](https://studygolang.com/pkgdoc)\n- [实效Go编程](http://docscn.studygolang.com/doc/effective_go.html)\n\n<!--more-->\n\n### 框架学习\n\n#### Flutter\n\n- [Flutter | 老孟](http://laomengit.com/)\n\n### 数据库学习\n","tags":["收藏"],"categories":["学习"]},{"title":"macOS 崩溃定位处理","url":"/2020/06/03/a0bbb232.html","content":"\n### 前言\n\nmacOS 系统升级 后，频繁出现温度过高、重启的问题，中间处理过程真的是一波三折，最终根据崩溃日志处理掉。\n\n<img src=\"http://img.bed.bugfix.fun/img/bed/20200603101652.jpg\" title=\"\" alt=\"\" data-align=\"center\">\n\n### 环境\n\nmacOS 10.15.4\n\n<!--more-->\n\n### 日志\n\n```prolog\npanic(cpu 9 caller 0xffffff7f901a0ad5): userspace watchdog timeout: remoted connection watchdog expired, 609 successful replies since wake (12680 seconds ago), last successful checkin 240 seconds ago\nBacktrace (CPU 9), Frame : Return Address\n0xffffffa3f471b720 : 0xffffff800f7215cd \n0xffffffa3f471b770 : 0xffffff800f85a3c5 \n…… 略\n      Kernel Extensions in backtrace:\n         com.apple.driver.watchdog(1.0)[99A75EFF-7734-31A0-80BF-FF8288E30D9B]@0xffffff7f9019f000->0xffffff7f901a7fff\n\nBSD process name corresponding to current thread: watchdogd\nBoot args: chunklist-security-epoch=0 -chunklist-no-rev2-dev\n\nMac OS version:\n19E287\n\nKernel version:\nDarwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64\nKernel UUID: AB0AA7EE-3D03-3C21-91AD-5719D79D7AF6\nKernel slide:     0x000000000f400000\nKernel text base: 0xffffff800f600000\n__HIB  text base: 0xffffff800f500000\nSystem model name: MacBookPro15,1 (Mac-937A206F2EE63C01)\nSystem shutdown begun: NO\n\nSystem uptime in nanoseconds: 250124907915179\nlast loaded kext at 118776526672522: |SCSITaskUserClient    422.101.1 (addr 0xffffff7f93a6e000, size 36864)\nlast unloaded kext at 14528750047101: >usb.!UHostPacketFilter    1.0 (addr 0xffffff7f91fe4000, size 24576)\nloaded kexts:\ncom.ruijie.network.virtualEthernetDriver    1\n|SCSITaskUserClient    422.101.1\n@filesystems.smbfs    3.4.2\n…… 略\n```\n\n### 解决方案\n\n注意日志中的 `loaded kexts` 部分，我的问题就是这里的软件不兼容导致的崩溃，卸载掉或升级兼容版本就好。\n\n本次日志中的问题是 `锐捷VPN` 的一个卸载残留导致的，最终我在目录 `/Library/PrivilegedHelperTools` 中删除了 `SSLVPNCD`解决该问题。\n\n**注意**：卸载 或清理 完相关不兼容软件后，记得重启系统。\n","tags":["macOS"],"categories":["问题记录"]},{"title":"MySQL正确清理 binlog","url":"/2020/06/03/32858011.html","content":"\n### 前言\n\nMySQL中的binlog日志记录了数据库中数据的变动，便于对数据的基于时间点和基于位置的恢复，但是binlog也会日渐增大，占用很大的磁盘空间，因此，要对binlog使用正确安全的方法清理掉一部分没用的日志。\n\n### 环境信息\n\nMySQL 8.0.19\n\n<!--more-->\n\n### 手动清理\n\n1. 查看主库和从库正在使用的binlog是哪个文件  \n   \n   ```sql\n   show master status\n   show slave status\n   ```\n\n2. 在删除binlog日志之前，首先对binlog日志备份，以防万一\n   \n   **注意**：时间一定不可以写错，以防将正在使用的binlog删除。\n   \n   ```sql\n   //删除指定日期以前的日志索引中binlog日志文件`\n   purge master logs before '2020-06-03 09:11:33'\n   ```\n\n### 自动清理\n\n1. 设置自动过期时间\n   \n   ```sql\n   // 查询当前 binlog 过期时间\n   show variables like 'binlog_expire_logs_seconds'; \n   // 设置自动过期时间\n   set global binlog_expire_logs_seconds = '秒数'; \n   ```\n\n### 写在最后\n\n| 版本     | 内容   | 时间                  |\n|:------:| ---- | ------------------- |\n| v1.0.0 | 正式成文 | 2020-06-03 09:17:24 |\n","tags":["MySQL"],"categories":["技术"]},{"title":"《On Java8》第四章","url":"/2020/06/01/72cb973.html","content":"\n### 前记\n\n最近重温 Java 的基础思想和设计，想看看《Java 编程思想》，后来得知第五版改名为《[On Java 8](https://lingcoder.github.io/OnJava8/#/)》了，更新了一些东西。\n\n**海边拾贝，边读边写，温故知新。**\n\n### 对象创建\n\n#### 内存分配（4.2.1）\n\n程序在运行时如何存储的呢？\n\n- **寄存器（Registers）**\n  \n  位于 CPU 内部，速度最快，数量极少，无法在我们的程序中获取控制权，按需分配。\n\n- **栈内存（Stack）**\n  \n  位于 RAM 中，通过栈指针获得处理器的支持，栈指针，下移分配内存，上移释放内存。创建程序是，Java 程序需要准确地知道栈内保存的所有对象的生命周期，由于该约束限制了程序的灵活性。\n  \n  <!-- more -->\n  \n  栈内存上存放了一些 Java 程序的数据，特别是对象引用（临时变量），但对象是存放在堆内存。\n\n- **堆内存（Heap）**\n  \n  位于 RAM 中，所有的 Java 对象都在堆中，new  一个对象时，会自动在堆上进行内存分配。编译器不用知道对象需要在堆上停留的时间，所以具备灵活性，但是弊端是分配和清理内存消耗的时间会更长。\n\n- **常量存储（Constant Storage）**\n  \n  位于堆内存的常量池，代码是存储在堆内存的方法区；\n\n- **非 RAM 存储（No-RAM Storage）**\n  \n  脱离于程序以外的，一般位于ROM 上。典型的有：\n  \n  1. 持久化对象：文件、数据库。\n  \n  2. 序列化对象：对象被转换为字节流，通常被发送到另一台机器。\n\n#### 基本类型的存储（4.2.2）\n\n- `new`  的对象位于堆中\n\n- 不使用 `new` 创建变量，而是使用一个`自动`变量，该变量直接存储`值`，\n  并置于栈内存中，因此更加高效。\n  \n  > 我的理解是：匿名临时变量\n\n### 对象清理（4.4）\n\n#### 作用域（4.4.1）\n\n- 基本变量\n  \n  作用域由`{ }`决定\n  \n  ```java\n  {\n      int x = 0;\n      {\n          int y = 1;\n      }\n  } \n  ```\n\n- new 对象\n  \n  出离了`{ }`，`str` 的引用依然存在，需要等 `Java` 的垃圾收集器检查所有 `new` 出来的对象并判断哪些不再可达，继而释放那些被占用的内存后，才能供其他新的对象使用。\n  \n  ```java\n  {\n      String str = new String(\"java\")\n  }\n  ```\n\n### 类的创建（4.5）\n\n#### 基本类型默认值（4.5.3）\n\n- char: `\\u0000(null)` 、byte: `(byte)0` 、short: `(short)0`\n\n- Java 在初始化类的时候回赋予默认值，但是不适用于局部变量，即不属于类的字段的变量。\n\n#### 方法使用（4.5.4）\n\n- 法名和参数列表统称为方法签名(signature of the method)。签名作为方法的唯一标识。\n\n### 写在最后\n\n| 版本     | 内容                       | 时间                  |\n|:------:|:------------------------ |:-------------------:|\n| v1.0.0 | 1. 创建文档<br>2. 做了第四章的阅读笔记 | 2020-06-01 19:30:14 |\n","tags":["技术","Java"],"categories":["阅读"]},{"title":"Flutter 学习笔记","url":"/2020/05/29/11390.html","content":"\n### 一些学习网站\n\n1. [《Flutter实战》](https://book.flutterchina.club/)\n\n2. [Flutter 社区中文资源](https://flutter.cn/docs)\n\n### 如何强制竖屏\n\n```dart\nvoid main() {\n  SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp])\n    .then((_) {\n      runApp(new MyApp());\n    });\n}\n```\n\n<!-- more -->\n\n### 页面跳转前权限判定\n\n很多页面需要判定是都具有权限才可以进入，传统一点的方法是跳转前判定一下，如下：\n\n```dart\nif (权限判定) {\n    Navigator.push(context, Page1())\n} else {\n    // 提示无权限或者跳转相关页面\n}\n```\n\n这种方法可以实现，但是很繁琐，推荐使用路由生成 钩子来统一处理，如下：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      onGenerateRoute: (RouteSettings settings) {\n        WidgetBuilder builder;\n        if (有权限) {\n          builder = (BuildContext context) => DemoPage1();\n        } else {\n          builder = (BuildContext context) => DemoPage12();\n        }\n        return new MaterialPageRoute(builder: builder, settings: settings);\n      },\n      // 余略\n    );\n  }\n}\n```\n","tags":["Flutter","学习笔记","大前端","移动端"],"categories":["学习笔记"]},{"title":"MySQL 5.7 索引","url":"/2020/05/28/6d26f4c0.html","content":"\n### 分类\n\n1. 普通索引/唯一索引`UNIQUE`\n   \n   - 普通索引：基本索引类型，允许列中出现空值和重复值\n   \n   - 唯一索引：\n     \n     - 值唯一，允许控制。\n     \n     - 组合索引的情况下，组合值需唯一\n     \n     - 主键索引是特殊的唯一索引，不许空值\n\n2. 单列索引/组合索引\n   \n   - 组合索引：只有查询条件中使用了组合字段的左边字段才会触发索引，遵循左前缀集合。\n\n3. 全文索引 `FULLTEXT`\n   \n   - 允许重复、空值\n   \n   - 在 char/varchar/text 类型上创建\n   \n   - MyISAM 支持\n\n4. 空间索引 `SPATIAL`\n   \n   - 针对空间数据类型：geometry、point、linestring、polygon\n   \n   - 非空索引\n\n<!-- more -->\n\n### 设计原则\n\n1. 索引数量适度原则，一个表中的索引字段不是越多越好\n\n2. 经常更新的表少索引，常查询的才做索引\n\n3. 数据量少的不要做，查询表的时间有可能比遍历索引的还快，效果不明显\n\n4. 列的取值很少的不需要做索引，比如：性别\n\n5. 某数据本身具有唯一性特征是，唯一索引会加速查询\n\n6. 频繁进行排序分组的列建索引，多字段建立组合索引\n\n### 意义\n\n1. 优点\n   \n   1. 创建唯一索引，保证行数据的唯一性\n   \n   2. 加快查询速度\n   \n   3. 使用分组和排序字句查询数据，可减少查询中分组和排序的时间\n\n2. 缺点\n   \n   1. 索引的创建、维护耗费额外的时间，随数据量增加，消耗的额外时间会增加\n   \n   2. 索引需要占用额外的存储空间，当索引量过多时，索引文件可能会比数据文件还大\n   \n   3. 数据的操作会同步东塔爱作用在索引上，降低了维护速度\n\n### 写在最后\n\n| 版本     | 内容       | 时间                  |\n|:------:| -------- | ------------------- |\n| v1.0.0 | 1. 初始化文档 | 2020-05-28 17:03:02 |\n","tags":["MySQL"],"categories":["技术"]},{"title":"136.Single Number","url":"/2020/01/15/32906.html","content":"\n### 题目\n\n给定一个 **非空** 整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n\n**说明：**\n\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n**示例 1:**\n\n> **输入:** [2,2,1]\n> **输出:** 1\n\n**示例 2:**\n\n> **输入:** [4,1,2,1,2]\n> **输出:** 4\n\n### 解答\n\n<!-- more -->\n\n1. 思路\n   \n   - 使用空间代换\n     \n     - 用 set 过滤一次，遍历原有数组，如果存在则移除 set 中数据，最后留存数据\n     \n     - 使用 dict（map）记录，然后统计 values\n   \n   - 不适用空间代换\n     \n     - 异或运算的运用，案例如下：\n       \n       ~~~ bash 案例   \n       # 原始数据\n       xor = 0\n       nums = [2, 2, 4, 3, 4]\n       # 异或运算过程\n       0 0 0 0 = xor     = 0\n       0 0 1 0 = nums[0] = 2\n       -------\n       0 0 1 0 = 2\n       0 0 1 0 = nums[1] = 2\n       -------\n       0 0 0 0 = 0\n       0 1 0 0 = nums[2] = 4\n       -------\n       0 1 0 0 = 4\n       0 0 1 1 = nums[3] = 3\n       -------\n       0 1 1 1 = 7\n       0 1 0 0 = nums[4] = 4\n       -------\n       0 0 1 1 = 3\n       ~~~\n\n2. 代码\n   \n   ~~~python\n   class Solution:\n       def singleNumber(self, nums: List[int]) -> int:\n           xor = 0\n           for i in range(len(nums)):\n               xor ^= nums[i]\n           return xor\n   \n   if __name__ == '__main__':\n       nums = [2, 2, 4, 3, 4]\n       print(Solution().singleNumber(nums))\n   ~~~\n\n### 写在最后\n\n| 版本     | 内容       | 时间                  |\n|:------:| -------- | ------------------- |\n| v1.0.0 | 1. 初始化文档 | 2020-01-15 17:40:17 |\n","tags":["刷题记录","LeetCode"],"categories":["算法"]},{"title":"《Linux就该这么学》第六章","url":"/2018/10/22/63727.html","content":"\n## 主要内容\n\n1. 一切从 “/” 开始\n2. 物理设备的明明规则\n3. 文件系统与数据资料\n4. 挂在硬件设备\n5. 添加交换分区\n6. 磁盘容量配合\n7. 软硬方式连接\n\n## 一切从 “/” 开始\n\nLinux 中的一切文件都是从根`\"/\"`目录开始，按照文件系统层次化标准（FHS）采用属性接口存放。\n\nLinux 系统中，文件和目录名严格区分大小写。\n\n### FHS\n\n关于文件系统层次化标准（FHS）是由 Linux 系统用户和开发者从经验中总结出来的，是用户在 Linux 系统中存储文件所需要遵守的规则。\n\n但是 FHS 对用户而言，只算是一种道德上的约束。\n\n<!--more-->\n\n下表中是常见的名称和响应内容\n\n| 序号  | 目录名称        | 应放置的文件内容                             |\n| --- | ----------- | ------------------------------------ |\n| 1   | /boot       | 开机所需要的文件 内核、开机菜单和所需要的配置文件等           |\n| 2   | /dev        | 以文件形式存放的任何设备与接口                      |\n| 3   | /etc        | 配置文件                                 |\n| 4   | /home       | 用户根目录                                |\n| 5   | /bin        | 存放单用户模式下还可以操作的命令                     |\n| 6   | /lib        | 开机时用到的函数库 以及/bin 与 /sbin 下的命令调用需要的函数 |\n| 7   | /sbin       | 开机过程中需要的命令                           |\n| 8   | /media      | 用于挂在设备文件的目录                          |\n| 9   | /opt        | 放置第三方的软件                             |\n| 10  | /root       | 系统管理员的根目录                            |\n| 11  | /srv        | 一些网络服务的数据文件目录                        |\n| 12  | /tmp        | 任何人均可以使用的临时目录                        |\n| 13  | /proc       | 虚拟文件系统 如：系统内核、进程、外部设备、网络状态等          |\n| 14  | /usr/local  | 用户自行安装的软件                            |\n| 15  | /usr/sbin   | Linux 系统开机时不会用到的软件、命令、脚本             |\n| 16  | /usr/share  | 帮助与说明文件，亦可以防止共享文件                    |\n| 17  | /var        | 主要存放经常变化的文件 如日志                      |\n| 18  | /lost+found | 当文件系统发生错误时，将一些丢失的文件 片段存在在这里          |\n\n### 路径\n\n路径是指如何定位到某个文件。\n\n- 绝对路径：从根目录（/）起，定位到某文件的完整路径写法\n- 相对路径：被定位文件相对于当前路径的写法\n\n## 物理设备的命名规则\n\n1. 系统内核中的  udev 设备管理器会自动规范硬件名称\n2. udev 设备管理器的服务会以守护进程的形式运行并监听内核发出的信号以管理 /dev 目录下的设备文件\n\n常见的硬件设备以文件名称：\n\n| 序号  | 硬件设备          | 文件名称              |\n| --- | ------------- | ----------------- |\n| 1   | IDE 设备        | /dev/hd[a-d]      |\n| 2   | SCSI/SATA/U 盘 | /dev/sd[a-p]      |\n| 3   | 软驱            | /dev/fd[0-1]      |\n| 4   | 打印机           | /dev/lp[0-15]     |\n| 5   | 光驱            | /dev/cdrom        |\n| 6   | 鼠标            | /dev/mouse        |\n| 7   | 磁带机           | /dev/st0 /dev/ht0 |\n\n现在 IDE 设备很少，硬盘设备一般都是以 `/dev/sd` 开头。一台主机最多挂在16块硬盘，以 `a~p` 结尾来代表，且硬盘的分区编号有一定的规则：\n    - 主分区、拓展分区编号以 1 开始，到 4 结束\n    - 逻辑分区从编号 5 开始\n\n**注意**：\n\n1. `/dev`  目录中设备 `sda` 并不是因为是链接在主板上第一个插槽而被命名为 `a`，而是根据内核的识别顺序而确定。插槽次序与设备命名次序相符合只是巧合 —— 识别顺序与插槽顺序相同。\n2. 设备 `sda3` 只能表示编号为 3 的分区，而不能判断 sda 设备上一定存在 3 个分区。\n3. 设备 `/dev/sda5`，dev 表示设硬件设备文件所在目录，sd 表示 SCSI 设备， a 表示硬盘顺序号，5 表示分区顺序号\n\n## 文件系统与数据资料\n\n### 文件系统\n\n1. ext3\n   \n   - 日志文件系统\n   - 宕机时避免文件资料丢失，可以修复不一致与错误\n\n2. ext4\n   \n   - ext3 改进版本\n   - RHEL 6 默认文件管理系统\n   - 支持存储容量高达 1EB\n   - 无限多的子目录\n   - 批量分配 block 快，提高读写效率\n\n3. xfs\n   \n   - 高性能日志文件系统\n   - RHEL7 默认文件管理系统\n   - 最大支持 18EB\n\n## 挂载硬件设备\n\n### mount 命令\n\n### umount 命令\n\n## 添加硬盘设备\n\n### fdisk 命令\n\n### du 命令\n\n## 添加交换分区\n\nSWAP(交换)分区是一种通过在硬盘中预先划分一定的空间，然后将把内存中暂时不常用的数据临时存放到硬盘中，以便腾出物理内存空间让更活跃的程序服务来使用的技术，其设计目的是为了解决真实物理内存不足的问题。\n\n真实的物理内存耗尽后才会调用交换分区的资源。\n\n在生产环境中，交换分区的 大小一般为真实物理内存的 1.5~2 倍\n\n## 磁盘容量配额\n\nroot 管理员可以使用磁盘容量配额服务来限制某位用户或某个用户组针对特定文件夹可以使用的最大硬盘空间或最大文件个数，一旦达到这个最大值就不再允许继续使用。\n\n### xfs_quota 命令\n\n### edquota 命令\n\n## 软硬方式链接\n\n## 附录\n\n### 参考\n\n1. 暂无\n\n## 写在最后\n\n| 版本     | 内容      | 时间                  |\n|:------:| ------- | ------------------- |\n| v1.0.0 | 1. 创建文档 | 2018-10-22 22:27:54 |\n| v1.0.1 | 1. 草稿完毕 | 2018-10-23 00:12:32 |\n","tags":["技术","Linux"],"categories":["阅读"]},{"title":"PHP 学习笔记","url":"/2018/10/15/62668.html","content":"1. PHP 7.3 安装 xdebug.so\n    1. mac 上 `brew install php`\n    2. 执行`php -i`，复制打印内容\n    3. 打开网址 `https://xdebug.org/wizard.php`，粘贴\n    4. 跟着网址上的导引走\n\n2. [PHPStrom debug 配置](https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html)\n<!-- more -->\n","tags":["PHP","后端"],"categories":["学习笔记"]},{"title":"《Linux就该这么学》第五章","url":"/2018/10/13/45302.html","content":"## 主要内容\n1. 用户身份和能力\n2. 文件权限与归属\n3. 文件的特殊权限\n4. 文件的隐藏权限\n5. 文件的访问控制列表\n6. su 命令与sudo 服务\n\n## 用户的身份和能力\n1. 用户\nLinux 中，每一个用户都有一个自己的 UID（User IDentification），该身份号码具有唯一性，因此可以通过 UID 值来判断用户身份。\n在 RHEL7 中，用户身份如下：\n    - UID [0]：系统管理员\n    - UID [1，999]：Linux 系统为了避免因为漏洞（系统或应用的）被黑客提权至整台服务器，默认服务程序会有独立的系统用户负责运行，继而有效控制被破坏范围。\n    - UID [1000, +]：管理创建的用以日产工作的普通用户\n\n2. 特殊用户 root\n有种说法，Linux 中的管理员就是 root，这其实是错误的。\nLinux 的管理员是 root 并不是因为名字，而是因为 UID 的数值为 0。\n\n<!-- more -->\n    \n3. 用户组\n    - 为了方便管理同一组的用户，Linux 系统引入了用户组的概念。\n    - 通过用户组号码 GID（Group IDentification），可以把多个用户加入到同一个组中，从而为组中的用户统一规划权限或指定认为。\n    - Linux 中创建每一个用户的同时，都将自动创建一个同名的基本用户组。\n        - 该用户组中，只有该用户一人。\n        - 若是该用户被纳入其他用户组中，则这个其他用户组称之为扩展用户组\n        - 一个用户只能有一个基本用户组，但是可以有多个扩展用户组\n\n### useradd 命令\n- 作用：创建新的用户\n- 格式： useradd [选项] 用户名\n- *备注*：\n    - 使用 useradd 命令建立的帐号，保存在 `/etc/passwd` 文本文件中。\n    - Red Hat Linux 中，`adduser` 命令实际上就是 `useradd` 的[符号链接](https://baike.baidu.com/item/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5)\n- 选项：\n    <table><tr><th>序号</th><th>参数</th><th>作用</th></tr><tr><td>1</td><td>-d</td><td>指定用户的默认跟目录（默认为：/home/username）</td></tr><tr><td>2</td><td>-e</td><td>账户到期时间，格式为 YYYY-MM-DD</td></tr><tr><td>3</td><td>-u</td><td>指定用户的默认 UID</td></tr><tr><td>4</td><td>-g</td><td>指定一个初始的用户基本组，该组必须已存在</td></tr><tr><td>5</td><td>-G</td><td>指定一个或多个扩展用户组</td></tr><tr><td>6</td><td>-N</td><td>不创建与用户同名的用户基本组</td></tr><tr><td>7</td><td>-s</td><td>指定该用户默认的 Shell 解释器（默认为/bin/bash）</td></tr></table>\n- 案例\n~~~bash 案例 http://man.linuxde.net/useradd useradd\n# /sbin/nologin 是一个特殊的 shell 解释器，使用该 shell 解释器的用户无法登录系统\nuseradd -d /home/testuser -u 9527 -s /sbin/nologin testuser\n# uid=9527(testuser) gid=9527(testuser) 组=9527(testuser)\nid testuser\n~~~\n\n### groupadd 命令\n- 作用：用于创建用户组\n- 格式：groupadd [选项] 群组名\n- *备注*\n    -  使用 groupadd 命令建立的账号，保存在 `/etc/group` 文本文件中\n- 选项：\n    <table><tr><th>序号</th><th>参数</th><th>作用</th></tr><tr><td>1</td><td>-g</td><td>指定新建工作组的 id</td></tr><tr><td>2</td><td>-r</td><td>创建系统工作组，系统工作组的 ID 小于 500</td></tr></table>\n- 案例：\n~~~bash\ngroupadd -g 1024 testgroup\n~~~\n\n### usermod 命令\n- 作用：修改用户属性\n- 格式：usermod [选项] 用户名\n- *备注*：\n    - 也可以直接编辑 `/etc/passwd` 文件\n- 选项：\n    <table><tr><th>序号</th><th>参数</th><th>作用</th></tr><tr><td>1</td><td>-c</td><td>填写用户账户的备注信息</td></tr><tr><td>2</td><td>-d -m</td><td>二者连用，可重新指定用户根目录并将老数据迁移</td></tr><tr><td>3</td><td>-e</td><td>用户到期时间，格式：YYYY-MM-DD</td></tr><tr><td>4</td><td>-g</td><td>变更所属用户组</td></tr><tr><td>5</td><td>-G</td><td>变更扩展用户组</td></tr><tr><td>6</td><td>-L</td><td>锁定用户，禁止登陆</td></tr><tr><td>7</td><td>-U</td><td>解锁用户，运行登陆</td></tr><tr><td>8</td><td>-s</td><td>变更默认用户</td></tr><tr><td>9</td><td>-u</td><td>修改用户 UID</td></tr></table>\n- 案例：\n~~~bash 案例 http://man.linuxde.net/usermod usermod\n# uid=9527(testuser) gid=9527(testuser) 组=9527(testuser)\nid testuser\nusermod -u 8888 -G root testuser\n# uid=8888(testuser) gid=9527(testuser) 组=9527(testuser),0(root)\nid testuser\n~~~\n\n### passwd 命令\n* 作用：修改用户密码、过期时间、认证信息等\n* 格式：passwd [选项] [用户名]\n* *备注*：\n    * 用户名不输入默认为 root\n    * root 修改自己或其他用户的密码时，不需要验证旧密码。\n* 选项\n    <table><tr><th>序号</th><th>参数</th><th>作用</th></tr><tr><td>1</td><td>-l</td><td> 锁定用户，禁止登陆</td></tr><tr><td>2</td><td>-u</td><td>解除锁定，允许登陆</td></tr><tr><td>3</td><td>--stdin</td><td>允许通过标准输入修改用户密码，例如：<br>echo \"New Password\" | passwd --stdin UserName</td></tr><tr><td>4</td><td>-d</td><td>使该用户可以空密登陆</td></tr><tr><td>5</td><td>-e</td><td>强制用户下次登录时修改密码</td></tr><tr><td>6</td><td>-S</td><td>显示用户的密码是否被锁定，以及密码所采用的加密算法名称</td></tr></table>\n* 案例：\n~~~bash\n# 锁定用户 testuser 的密码 。\n# passwd: 操作成功\npasswd -l testuser\n#testuser NP 2018-10-13 0 99999 7 -1 (密码为空。)\npasswd -S testuser\n~~~\n\n### userdel\n* 作用：删除用户\n* 格式：userdel [选项] 用户名\n* 备注：\n    * 执行删除操作室，用户根目录会默认保留，确认无用的话，使用 `-r` 参数将其删除\n* 选项：\n<table><tr><th>序号</th><th>参数</th><th>作用</th></tr><tr><td>1</td><td>-f</td><td>强制删除用户</td></tr><tr><td>2</td><td>-r</td><td>同时删除用户和根目录</td></tr></table>\n* 案例：\n~~~bash\n#uid=8888(testuser) gid=9527(testuser) 组=9527(testuser),0(root)\nid testuser\n\nuserdel testuser\n\n#id: testuser: no such user\nid testuser\n~~~\n\n## 文件权限和归属\n- Linux 中使用不同字符区分文件类型\n    - `-`：普通文件\n    - `d`：目录文件\n    - `l`：链接文件\n    - `b`：块设备文件\n    - `c`：字符设备文件\n    - `p`：管道文件\n\n- 文件权限\n    - 可读（r）：可读取文件的实际内容\n    - 可写（w）：可以修改文件内容，如编辑、新增、修改、删除文件内容\n    - 可执行（x）：能够运行的一个脚本程序\n\n- 目录权限\n    - 可读（r）：可以读取目录内文件列表\n    - 可写（w）：可以修改目录内文件，如新增、删除、重命名\n    - 可执行（x）：能够进入该目录\n\n- 文件权限的字符与数字表\n    <table style=\"border-collapse:collapse;border-spacing:0;border:none;border-color:#ccc\" class=\"tg\"><tr><th style=\"font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;text-align:center\">权限分配</th><th style=\"font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;text-align:center\" colspan=\"3\"> 文件所有者</th><th style=\"font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;text-align:center\" colspan=\"3\">文件所属组</th><th style=\"font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;text-align:center;vertical-align:top\" colspan=\"3\">其他用户</th></tr><tr><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\">权限项目</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">读</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\">写</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">执行</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\">读</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">写</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center;vertical-align:top\">执行</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center;vertical-align:top\">读</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center;vertical-align:top\">写</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center;vertical-align:top\">执行</td></tr><tr><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\">字符表示</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">r</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\">w</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">x</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\">r</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">w</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center;vertical-align:top\">x</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center;vertical-align:top\">r</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center;vertical-align:top\">w</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center;vertical-align:top\">x</td></tr><tr><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\"> 数字表示</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">4</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\">2</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">1</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center\">4</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center\">2</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center;vertical-align:top\">1</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center;vertical-align:top\">4</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center;vertical-align:top\">2</td><td style=\"font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center;vertical-align:top\">1</td></tr></table>\n    - 说明：文件的权限数字表示法基于字符表示（rwx）的权限计算而来，目的是简化权限表示\n    - 案例\n        - 某文件具备（rwx）权限，则数值表示为 7（4+2+1）\n        - 某文件，权限为 rwxrw-r--，数字表示为 764\n        - 完整示例：\n        ~~~bash\n        #文件类型 访问权限      所属用户 所属群组         时间           文件名\n         -       rwxr--r-- 1 root    root     23 9月 13 20:13  simple.sh\n        ~~~\n\n## 文件的特殊权限\n单纯的文件 `rwx` 权限无法满足安全和灵活性的需求，于是产生了 `SUID`/`SGID`/`SBIT` 的特殊权限位，可以约普通权限一同使用，弥补不足。\n\n### SUID\nSUID 是一种对二进制程序设置的特殊权限，可以让二进制程序的执行者临时拥有属主的权限（仅针对当前用户拥有执行权限的二进制程序有效）。\n\n加入 SUID 特殊权限后，所有者的权限由 rwx 变成了 rws，其中 `x` 改变成 `s` 就意味着该文件被赋予了 SUID 权限。若是原本权限诶 `rw-` ，赋权后将变为 `S`\n- 案例：\n    ~~~bash\n    # ---------- 1 root root 809 10月 13 19:16 /etc/shadow\n    ls -l /etc/shadow\n    # -rwsr-xr-x. 1 root root 27832 6月  10 2014 /bin/passwd\n    ls -l /bin/passwd\n    ~~~\n    所有用户都可以执行 `passwd` 来修改自己的用户密码。但是密码存储在 `/etc/shadow` 中，其权限为 `000`，也就是说只有 `root` 用户才可以查看、修改。于是，给 `passwd` 机上 **SUID** 特殊权限位，在使用 `passwd` 修改密码时间，就可以**让普通用户临时获取程序所有者的权限**，从而将密码写入到 `shadow` 文件中。\n\n### SGID\nSGID 实现了一下两种功能：\n- func-1. 让执行者临时拥有属组的权限（对拥有执行权限的二进制程序进行设置）\n    - 类似于 `SUID`，执行带有该标志位的程序，将自动获取受到影响需要读取的文件的所属组权限\n- func-2. 在某个目录中创建的文件自动继承该目录的用户组（只可以对目录进行设置）\n\n命令：\n~~~bash\nchmod -Rf g+s testdir\n~~~\n\n### SBIT\nSBIT 特殊权限位可以确保用户只能删除自己的文件。也就是说，当对目录设置了 SBIT 权限后，该目录的文件就只能被其所有者执行删除操作，即使被操作的文件权限是 777。\n\n当目录被设置 SBIT 特殊权限位后，文件的其他人权限部分的 `x` 执行权限就会被替换成 `t` 或者 `T`。\n- 原本有 `x` 执行权限则会写成 `t`\n- 原本没有 `x` 执行权限则会被写成 `T`。\n\n命令：\n~~~bash\nchmod -R o+t testdir\n~~~\n\n***备注***：文件能否被删除并不取决于自身的权限，而是看其所在的目录是否具有写入权限。\n\n## 文件的隐藏属性\nLinux 系统中的文件，除了具备一般权限和特殊权限外，还有一种隐藏权限。\n\n有时遇到有权限也无法删除文件，或是日志文件中可以追加却不能修改或删除的情况都是该权限导致的。\n\n### chattr 命令\n- 作用：设置文件的隐藏权限\n- 格式：chattr [参数] 文件\n- *备注*：\n    - 追加隐藏权限，`+参数`\n    - 移除隐藏权限，`-参数`\n- 参数：\n<table><tr><th>序号</th><th>参数</th><th>作用</th></tr><tr><td>1</td><td>i</td><td>无法对文件修改<br>若对目录设置，则仅能修改子文件内容，不能新建或删除</td></tr><tr><td>2</td><td>a</td><td>仅允许追加内容，无法覆盖或删除内容（Append Only）</td></tr><tr><td>3</td><td>A</td><td>不在修改文件的最后访问时间（atime）</td></tr><tr><td>4</td><td>b</td><td>不在修改文件或目录的存取时间</td></tr><tr><td>5</td><td>c</td><td>默认将文件或目录进行压缩</td></tr><tr><td>6</td><td>d</td><td>使用 dump 命令备份时忽略本文件、目录</td></tr><tr><td>7</td><td>D</td><td>检查压缩文件的错误</td></tr><tr><td>8</td><td>s</td><td>彻底从硬盘删除，不可恢复（硬盘上源文件区域用 0 填充）</td></tr><tr><td>9</td><td>S</td><td>文件内容变更后立刻同步硬盘（sync）</td></tr><tr><td>10</td><td>t</td><td>让文件系统支持尾部合并（tail-merging）</td></tr><tr><td>11</td><td>u</td><td>删除该文件后依然保留其在硬盘中的数据，方便恢复</td></tr><tr><td>12</td><td>X</td><td>可以直接访问压缩文件的内容</td></tr></table>\n    - 案例\n    ~~~bash 案例 http://man.linuxde.net/chattr chattr\n    echo \"test file\" > chattrtest\n    chattr +a chattrtest\n    # rm: 无法删除\"chattrtest\": 不允许的操作\n    rm -f chattrtest\n    ~~~\n\n### lsattr 命令\n- 作用：显示文件的隐藏权限\n- 格式：lsattr [参数] 文件\n- 参数：略\n-  案例\n~~~bash 案例 http://man.linuxde.net/lsattr lsattr\n# -----a---------- chattrtest\nlsattr chattrtest\n~~~\n\n## 文件访问控制列表\n一般权限、特殊权限和隐藏权限是针对某一类用户设置的。而文件的访问控制列表（ACL）是针对某个指定用户进行单独的权限控制。\n\n文件的 ACL 提供的是在所有者、所属组、其他人的读、写、执行权限之外的特殊权限控制。\n\n如果针对某个目录设置了 ACL，目录中的文件都会继承其 ACL；若针对文件设置的 ACL，则文件不在继承目录的 ACL。\n\n### setfacl 命令\n- 作用：用于管理文件的 ACL 规则\n- 格式：setfacl [参数] 文件名称\n- *备注*：\n    - 设置过 ACL 后，`ls` 结果列表，权限后的最后一个`.` 会变成 `+`\n    ~~~bash\n    ls -ld /root\n    dr-xrwx---+ 14 root root 4096 May 4 2017 /root\n    ~~~\n- 案例：参见 [案例](http://man.linuxde.net/setfacl setfacl)\n\n### getfacl 命令\n- 作用：显示文件上设置的 ACL 信息\n- 格式：getfacl 文件\n- 案例：\n~~~bash 案例 http://linux.51yip.com/search/getfacl getfacl\n# file: chattrtest\n# owner: root\n# group: root\n#user::rw-\n#group::r--\n#other::r--\ngetfacl chattrtest\n~~~\n\n## su 命令与 sudo 服务\n\n### su 命令\n* 作用：免退出切换用户身份\n* *备注*：\n    * 从 root 切换到普通用户不想要密码，反之需要\n* 格式：su - username\n    * 带上 `-`，表示完全切换新用户的信息，包括工作环境、环境变量等等\n\n### sudo 服务\n* 作用：给普通用户提供额外的权限来完成原本 root 管理员才能完成的任务，避免密码泄露。\n* 格式：sudo [参数] 命令名称\n* 参数：\n    <table><tr><th> 序号</th><th>参数</th><th>作用</th></tr><tr><td>1</td><td>-h</td><td>列出帮助信息</td></tr><tr><td>2</td><td>-l</td><td>列出当前用户可执行的命令</td></tr><tr><td>3</td><td>-u<br>用户名或 UID</td><td>以指定的用户身份执行命令</td></tr><tr><td>4</td><td>-k</td><td>清空密码的有效时间，下次执行需要密码验证</td></tr><tr><td>5</td><td>-b</td><td>在后台执行指定的命令</td></tr><tr><td>6</td><td>-p</td><td>修改询问密码的提示语</td></tr></table>\n\n#### 配置 sudo 服务\n配置文件存储在`/etc/sudoers`，可以直接 `vi` 编辑，也可以使用 `visudo` 编辑。\n\n需要注意：    \n- `visudo` 命令需要 `root` 权限\n- `visudo` 会禁止多个用户同时修改配置文件，还能进行语法检查\n\n#### 总结\n总结来说，sudo 具备以下功能：\n1. 限制用户执行特定命令\n2. 记录用户执行的没一条命令\n3. 配置文件 （`/etc/sudoers`）提供集中的用户管理、权限与主机等参数\n4. 验证密码的五分钟（默认值）内无需再次校验\n\n## 附录\n### 参考\n1. [sudo 与 visudo 的超细用法说明](http://blog.51cto.com/chenfage/1830424)\n2. <a href=\"https://wiki.archlinux.org/index.php/Main_page_(简体中文)\" target=\"_blank\" rel=\"noopener\">Main page (简体中文)</a>\n\n## 写在最后\n|版本|内容|时间|\n| :-: | - | - |\n| v1.0.0 | 1. 创建文档 | 2018-10-13 17:20:47 |\n| v1.0.1 | 1. 第五章阅读笔记完成，并完成校验 | 2018-10-17 15:51:14 |\n","tags":["技术","Linux"],"categories":["阅读"]},{"title":"《Linux就该这么学》第四章","url":"/2018/09/18/29256.html","content":"## 主要内容\n1. Vim 文本编辑器\n2. 编写 Shell 脚本\n3. 流程控制语句\n4. 计划任务服务程序\n\n## Vim 文本编辑器\n\n```\n在 Linux 中，一切都是文件，而配置一个服务就是在修改器配置文件的参数。\n```\n\n1. 三种模式\n    - 命令模式：控制光标移动，对文本进行复制、粘贴、删除和查找等操作\n    - 输入模式：正常的文本录入\n    - 末行模式：保存或退出文档，以及设置编辑环境\n2. 流程\n    - 每次运行 Vim，默认是命令模式\n    - 先切换（`a`、`i`、`o`）输入模式进行文本编写\n    - 然后（`esc`）返回命令模式\n    - 再进入（`:`）末行模式进行保存或退出\n    - ***无法从输入模式直接切换到末行模式***\n3. Vim 常用命令\n<!-- more -->\n    <table><tr><th>序号</th><th>命令</th><th>作用</th></tr><tr><td>1</td><td>dd</td><td> 删除（剪切）光标所在整行</td></tr><tr><td>2</td><td>5dd</td><td>删除（剪切）从光标处开始的5行</td></tr><tr><td>3</td><td>yy</td><td>复制光标所在整行</td></tr><tr><td>4</td><td>5yy</td><td>复制从光标处开始的 5 行</td></tr><tr><td>5</td><td>n</td><td>搜索结果，下一个</td></tr><tr><td>6</td><td>N</td><td>搜索结果，上一个</td></tr><tr><td>7</td><td>u</td><td>撤销上一步的操作</td></tr><tr><td>8</td><td>p</td><td>将之前删除（dd）或复制的（yy）的数据粘贴到光标后</td></tr></table>\n4. 末行模式\n    - 输入`:`即可进入该模式\n    - 该模式主要用于保存或退出文件\n    - 设置 Vim 编辑器的工作环境\n    - 让用户执行外部的 Linux 命令\n    - 跳转指定的行数\n    <table><tr><th>序号</th><th>命令</th><th>作用</th></tr><tr><td>1</td><td>:w</td><td>保存</td></tr><tr><td>2</td><td>:q</td><td>退出<br></td></tr><tr><td>3</td><td>:q!</td><td>放弃对文档的修改，强制退出</td></tr><tr><td>4</td><td>:wq!</td><td>强制保存退出</td></tr><tr><td>5</td><td>:set nu</td><td>显示行号</td></tr><tr><td>6</td><td>:set nonu</td><td>不显示行号</td></tr><tr><td>7</td><td>:命令</td><td>执行输入的命令，包括外部命令</td></tr><tr><td>8</td><td>: 整数</td><td>跳转指定行</td></tr><tr><td>9</td><td>:s/one/two</td><td>将当前光标所在行的第一个 one 替换成 two</td></tr><tr><td>10</td><td>:s/one/two/g</td><td>将当前光标所在行的所有 one 替换成 two</td></tr><tr><td>11</td><td>:%s/one/two/g</td><td>将全文中的所有 one 替换成 two</td></tr><tr><td>12</td><td>:/字符串</td><td>在文本中从上至下搜索该字符串</td></tr><tr><td>13</td><td>:?字符串</td><td>在文本中从上至下搜索该字符串</td></tr></table>\n\n### 编写简单文档\n\n命令模式切换输入模式\n- `a`：append，在光标后一位进行输入\n- `i`：insert，在光标前一位进行输入\n- `o`：换行输入\n\n### 配置主机名称\n略\n\n### 配置网卡信息\n略\n\n注：笔者用的 Centos 7.5，虚拟机，与原著作者书中的案例不同\n\n### 配置 Yum 软件仓库\n略\n\n关于 Yum，笔者会另起一篇文章。\n\n\n## 编写 Shell 脚本\n- 交互式（Interactive）：输入一条，执行一条\n- 批处理（Batch）：实现编写好一个完整的脚本，一次执行脚本中的诸多命令\n\n### 编写简单 Shell 脚本\n~~~bash\nvim simple.sh\n\n# ---------- 输入\n#!/bin/bash\npwd\nls -la\n\n# 赋予权限\nchmod u+x simple.sh\n\n# 执行\n./simple.sh\n~~~\n\n### 接受用户输入参数\n- $0 标识脚本名称\n- $# 标识参数数量\n- $n 位置 N 的参数值\n- $* 所有参数\n- $? 显示上一次命令的执行返回值\n- 案例：\n\n    ~~~bash\n    vim simple_input.sh\n    \n    # 输入\n    #!/bin/bash\n    echo \"当前脚本名称 $0\"\n    echo \"一共有 $# 个参数，分别是 $*\"\n    echo \"第一个参数是 $0，第二个参数是$3\"\n    ~\n    \n    # 权限\n    chmod u+x simple_input.sh\n    \n    # 执行\n    ./simple_input.sh 1 2 3 4\n    \n    # 输出\n    # 当前脚本名称 ./simple_input.sh\n    # 一共有 4 个参数，分别是 1 2 3 4\n    # 第一个参数是 ./simple_input.sh，第二个参数是3\n    ~~~\n\n### 判断用户参数\n- Shell 脚本中的条件测试语法可以判断表达式是否成立，若条件成立则返回数字 0，否则便返回其他随机数值\n- 格式：`[ 条件表达式 ]`\n    - **注意**：中括号的边上有一个空格，**务必保留**\n- 结果：\n    - `0` 为真\n    - `> 0` 为假，具体值可能为1，可能为2，具体看系统版本（原著，笔者环境为 1）\n- 分类：\n    - 文件测试语句\n    - 逻辑测试语句\n        - `&&` 与运算\n        - `!` 非运算\n        - `||` 或运算\n    - 整数值测试语句\n    - 字符串比较语句\n\n#### 文件测试语句\n\n| 序号 | 运算符 | 作用 |\n|:-:|:-:|:-|\n| 1 | -d | 测试文件是否为目录类型 |\n| 2 | -e | 测试文件是否存在 |\n| 3 | -f | 测试是否为一般文件 |\n| 4 | -r | 测试当前用户是否有权限读取 |\n| 5 | -w | 测试当前用户是否有权限写入 |\n| 6 | -x | 测试当前用户是否有权限执行 |\n\n案例：\n~~~bash\n# && 与操作，|| 或操作，失败后执行\n# 其他的运算符与之类似\n[ -e file ] && echo \"Exist\" || echo \"Not Exist\"\n~~~\n\n#### 整数值测试语句\n\n| 序号 | 运算符 | 作用           |\n|:----:|:------:|----------------|\n|   1  | -eq    | 是否等于       |\n|   2  | -ne    | 是否不等于     |\n|   3  | -gt    | 是否大于       |\n|   4  | -lt    | 是否小于       |\n|   5  | -le    | 是否等于或小于 |\n|   6  | -ge    | 是否等于或大于 |\n\n案例一：\n~~~bash\n# 其他的运算符与之类似\n[ 10 -eq 110 ]\necho $?\n# 真 0，假 1\n~~~\n\n案例二：\n~~~bash\n# 获取内存余量，判断是否充足（余量 < 1024M）\n\n# 获取内存余量\n# 务必注意：FreeMem 后面的等号左右两边不要有空格\nFreeMem=`free -m | grep Mem: | awk '{print $4}'`\n# 判断比较\n[ $FreeMem -lt 1024 ] && echo \"内存不足\" || echo \"内存充足\"\n~~~\n\n#### 字符串比较语句\n\n| 序号 | 运算符 | 作用           |\n|:----:|:------:|----------------|\n|   1  | =    | 比较字符串是否相同       |\n|   2  | !=    | 比较字符串是否不同     |\n|   3 | -z    | 判断字符串是否为空     |\n\n案例一：\n~~~bash\n# 判断 String 是否为空\n[ -z $String ]\necho $?\n~~~\n\n案例二：\n~~~bash\necho $LANG\n# 运算符前后 务必 保留空格\n[ $LANG != \"en.US\" ] && echo \"Not en.US\" || echo $LANG\n~~~\n\n## 流程控制语句\n一共有四种 `if`、`for`、`while`、`case`\n\n### `if` 语句\n- 单分支结构\n    - 语法\n    ~~~bash\n    if 条件测试操作\n        then 命令序列\n    fi\n    ~~~\n    - 案例：检查并创建目录\n    ~~~bash\n    vim sample_check_dir.sh    \n    # 赋予权限\n    chmod u+x ./sample_check_dir.sh\n    # 执行\n    ./sample_check_dir.sh\n    ~~~\n\n    ~~~bash 脚本：sample_check_dir.sh\n    # 输入一下内容：\n    #!/bin/bash\n    DIR=\"/root/fileTest/fileTestDeep\"\n    # 判断目录是否存在\n    if [ ! -e $DIR ]; then\n        # 创建测试目录\n        mkdir -p $DIR\n        # 列出目录文件\n        ls /root\n    fi\n    ~~~\n\n- 双分支结构\n    - 语法：\n    ~~~bash\n    if 条件测试操作\n        then 命令序列1\n        else 命令序列2\n    fi\n    ~~~\n    - 案例：\n    ~~~bash\n    # 编辑\n    vim sample_check_host.sh\n    # 赋予权限\n    chmod u+x ./sample_check_host.sh\n    \n    # 执行\n    # Please input host.\n    ./sample_check_host.sh\n    # Host 127.0.0.1 is On-line.\n    ./sample_check_host.sh 127.0.0.1\n    # Host 256.0.0.1 is Off-line.\n    ./sample_check_host.sh 256.0.0.1\n    ~~~\n    ~~~bash 脚本：sample_check_host.sh\n    #!/bin/bash\n    # 判断是否输入了测试 ip\n    if [ ! -z $1 ]\n        then\n        ping -c 3 -i 0.2 -W 3 $1 &> /dev/null\n        if [ $? -eq 0 ]; then \n            echo \"Host $1 is On-line.\"\n        else \n            echo \"Host $1 is Off-line.\"\n        fi\n        else echo \"Please input host.\"\n    fi\n    ~~~\n\n- 多分支结构\n    - 语法\n    ~~~bash\n    if 条件测试操作1\n        then 命令序列1\n    elif 条件测试操作2\n        then 命令序列2\n    else\n        命令序列3\n    if\n    ~~~\n    - 案例\n    ~~~bash\n    # 编辑\n    vim sample_check_score.sh\n    # 赋予权限\n    chmod u+x ./sample_check_score.sh\n    \n    # 执行\n    ./sample_check_score.sh\n    ~~~\n    ~~~bash 脚本：sample_check_score.sh\n    #!/bin/bash\n    \n    # 读入成绩\n    read -p \"输入你的成绩：\" GRADE\n    \n    # 分支判断\n    if [ $GRADE -ge 85 ] && [ $GRADE -le 100 ]; then \n        echo \"$GRADE 分 非常棒\"\n    elif [ $GRADE -ge 70 ] && [ $GRADE -le 84 ]; then \n        echo \"$GRADE 分 通过\"\n    elif [ $GRADE -ge 100 ] || [ $GRADE -le 0 ]; then\n        echo \"分数不合法\"\n    else \n        echo \"$GRADE 分 未通过\"\n    fi\n    ~~~\n\n### `for` 语句\n- 语法\n~~~bash\nfor 变量名 in 取值列表; do\n    命令序列\ndone\n~~~\n- 案例\n~~~bash 脚本：sample_check_host_loop.sh\n#!/bin/bash\n\n# 从文件读取 hostlist\nHOST_LIST=$(cat /root/ip_addrs.txt)\n# 循环 ping\nfor host in $HOST_LIST; do\n    ping -c 3 -i 0.2 -W 3 $host &> /dev/null\n    if [[ $? -eq 0 ]]; then\n        echo \"Host $host is On-line\"\n    else\n        echo \"Host $host is Off-line\"\n    fi\ndone\n~~~\n\n### `while` 语句\n- 语法\n~~~bash\nwhile [[ 条件测试操作 ]]; do\n    命令序列\ndone\n~~~\n- 案例\n~~~bash 脚本：sample_game_guess_number.sh\n#!/bin/bash\n\nPRICE=$(expr $RANDOM % 1000)\nTIMES=0\n\necho \"猜猜看数字是多少\"\nwhile true; do\n    read -p \"请输入您猜的数字：\" PRICE_IN\n    let TIMES++\n    if [[ $PRICE_IN -eq $PRICE ]]; then\n        echo \"正确数字 $PRICE，一共猜了 $TIMES 次\"\n        exit 0\n    elif [[ $PRICE_IN -gt $PRICE ]]; then\n        echo \"大了一些\"\n    else\n        echo \"小了一些\"\n    fi\ndone\n~~~\n\n### `case` 语句\n- 语法\n~~~bash\ncase 变量值 in\n    模式1 )\n        命令序列1\n            ;;\n    模式2 )\n        命令序列2\n            ;;\n    *)\n        默认命令序列\nesac\n~~~\n- 案例\n~~~bash 脚本：sample_check_char.sh\n#!/bin/bash\n\nread -p \"输入一个字符：\" KEY\n\ncase $KEY in\n    [a-z]|[A-Z] )\n        echo \"字母\"\n        ;;\n    [0-9] )\n        echo \"数字\"\n        ;;\n    *)\n        echo \"其他种类字符\"\nesac\n~~~\n\n## 计划任务服务程序\n- 一次性任务\n    - 命令：at\n    - **注意**：\n        - `at: 未找到命令`：执行 `yum install at`\n        - `No atd running?`：执行 `systemctl start at`\n    - 参数\n        <table><tr><th>序号</th><th>运算符</th><th>作用</th></tr><tr><td>1</td><td>-f</td><td>指定包含具体指令的任务文件</td></tr><tr><td>2</td><td>-q</td><td>指定新任务的队列名称</td></tr><tr><td>3</td><td>-l 或 [atq](http://man.linuxde.net/atq)</td><td>显示待执行任务的列表</td></tr><tr><td>4</td><td>-d 或 [atrm](http://man.linuxde.net/atrm)</td><td>删除指定的待执行任务</td></tr><tr><td>5</td><td>-m</td><td>任务执行完成后向用户发送E-mail</td></tr></table>\n    - 案例\n    ```bash 案例 http://man.linuxde.net/at at\n    at 12:30\n    > /bin/ls\n    > ctrl+d 结束输入\n    \n    # 执行后，会提示：您在 /var/spool/mail/root 中有新邮件\n    # 邮件就是 命令的执行结果\n    ```\n\n- 周期性任务\n    - 命令：crontab\n    - **注意**：\n        - 在 crond 服务的配置参数中，可以像 Shell 脚本那样以#号开头写上注释信息，方便阅读理解\n        - 计划任务中的 “minute” 字段必须有数值，绝对不能为空或是*号\n        - “day” 和 “week” 字段不能同时使用，否则就会发生冲突。\n    - 说明：系统默认安装，自动启动 crond 进程，每分钟检测。\n    - 格式：`minute   hour   day   month   week   command`，顺序：分 时 日 月 周\n    <table><tr><th>运算符</th><th>作用</th></tr><tr><td>minute</td><td>表示分钟，可以是从 0 到 59 之间的任何整数</td></tr><tr><td>hour</td><td>表示小时，可以是从 0 到 23 之间的任何整数</td></tr><tr><td>day</td><td>表示日期，可以是从 1 到 31 之间的任何整数</td></tr><tr><td>month</td><td>表示月份，可以是从 1 到 12 之间的任何整数</td></tr><tr><td>week</td><td>表示星期几，可以是从 0 到 7 之间的任何整数，这里的 0 或 7 代表星期日</td></tr><tr><td>command</td><td>要执行的命令，可以是系统命令，也可以是自己编写的脚本文件</td></tr></table>\n    在以上各个字段中，还可以使用以下特殊字符：\n    <table><tr><th> 字符</th><th>作用</th></tr><tr><td>\\*</td><td>代表所有可能的值<br>例如 month 字段是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作</td></tr><tr><td>,</td><td>可以用逗号隔开的值指定一个列表范围<br>例如，“1,2,5,7,8,9”</td></tr><tr><td>-</td><td>可以用整数之间的中杠表示一个整数范围<br>例如 “2-6” 表示 “2,3,4,5,6”</td></tr><tr><td>/</td><td>可以用正斜线指定时间的间隔频率<br>例如 “0-23/2” 表示每两小时执行一次。<br>\\--\\--\\--\\--<br>同时正斜线可以和星号一起使用<br>例如 */10，如果用在 minute 字段，表示每十分钟执行一次。</td></tr></table>\n\n    - 命令选项\n    <table><tr><th>序号</th><th>运算符</th><th>作用</th></tr><tr><td>1</td><td>-e</td><td>编辑该用户的计时器设置</td></tr><tr><td>2</td><td>-l</td><td>列出该用户的计时器设置</td></tr><tr><td>3</td><td>-r</td><td>删除该用户的计时器设置</td></tr><tr><td>4</td><td>-u&lt;用户名称&gt;</td><td>指定要设定计时器的用户名称</td></tr></table>\n    - 案例：\n    ~~~bash 案例 http://man.linuxde.net/crontab crontab\n    # 每 1 分钟执行一次 command\n    * * * * * command\n    # 每小时的第 3 和第 15 分钟执行\n    3,15 * * * * command\n    # 每小时执行任务\n    * */1 * * * command\n    # 一月一号的 4 点执行任务\n    0 4 1 jan * command\n    ~~~\n    \n## 附录\n1. [Shell 脚本调试的三种方式](https://blog.csdn.net/hanbo_112/article/details/53692156)\n\n## 写在最后\n|版本|内容|时间|\n| :-: | - | - |\n| v1.0.0 | 1. 创建文档<br>2. 第四章阅读笔记草稿 | 2018-09-18 22:08:06 |\n| v1.0.1 | 1. 继续编写第四章阅读笔记草稿 | 2018-10-12 16:28:21 |\n| v1.0.2 | 1. 第四章阅读笔记完成，并完成校验 | 2018-10-13 17:20:47 |\n","tags":["技术","Linux"],"categories":["阅读"]},{"title":"工具收集","url":"/2018/09/18/58135.html","content":"\n##### 写作\n\n1. markdown\n   - [表格生成工具](http://www.tablesgenerator.com/html_tables)\n","tags":["工具"],"categories":["工具"]},{"title":"Git 技巧集录","url":"/2018/09/10/38212.html","content":"\n### 提取差异并打包\n1. 查看版本 id\n\n    ~~~bash\n    # 64b76ec0e81dc45b8d4dea418afe34e5c49e7c09 (HEAD -> master, origin/master) 变更说明\n    # 9dd00bc6e704c8d4ddeb9001f3eeb3ff8ebfb744 变更说明\n    # d4549e575d3114210dc22a903ff708768f81dddc 变更说明\n    # eb11b702409f2170644a30ed749e1bea6eeade16 变更说明\n    # ……\n    git log --pretty=oneline\n    ~~~\n\n2. 对比差异\n    \n    - **注意**：commit hash 不用全部的，前 7 位就好\n    - 如：64b76ec0e81dc45b8d4dea418afe34e5c49e7c09 -> 64b76ec\n    \n    ~~~bash\n    # 差异文件 1\n    # 差异文件 2\n    # 差异文件 3\n    # ……\n    git diff 64b76ec eb11b70 --name-only\n    ~~~\n\n3. 打包\n\n    <!-- more -->\n\n    ~~~bash\n    git diff 64b76ec eb11b70 --name-only | xargs zip update.zip\n    ~~~\n\n### .gitkeep 文件的作用\n1. 占位符，用以提交空间夹使用\n","tags":["Git","技巧"],"categories":["技术"]},{"title":"《Linux就该这么学》第三章","url":"/2018/09/09/7305.html","content":"## 管道符、重定向与环境变量\n### 输入、输出重定向\n1. 输入重定向是文件导入命令\n2. 输出重定向是原本输出到屏幕的命令结果写入到指定文件中\n    - 种类\n        1. 标准输出重定向\n        2. 错误输出重定向\n    - 行为\n        1. 清空：清空原有内容\n        2. 追加：在原有内容尾部追加\n    - 具体\n        1. 标准输入重定向（STDIN，文件描述符 0）：默认从键盘输入，也可从其他文件或命令输入\n        2. 标准输出重定向（STDOUT，文件描述符 1）：默认输出到屏幕\n        3. 错误输出重定向（STDERR，文件描述符 2）：默认输出到屏幕\n<!-- more -->\n3. 重定向符号`>` 和 `<`\n    - 输入重定向用到的符号和作用\n        <table><tr><th>序号</th><th>符号</th><th>作用</th></tr><tr><td>1</td><td>命令 &lt; 文件</td><td>将文件作为命令的标准输出</td></tr><tr><td>2</td><td>命令 &lt;&lt; 分界符</td><td>从标准输入中读入，直到遇见分界符停止</td></tr><tr><td>3</td><td>命令 &lt; 文件1 &gt; 文件2</td><td>文件1作为命令的标准输入并标准输出到文件2</td></tr></table>\n            \n    - 输出重定向用到的符号和作用\n        <table><tr><th></th><th>符号</th><th>作用</th><th>模式</th></tr><tr><td>1</td><td> 命令 &gt; 文件</td><td>将标准输出重定向到一个文件中</td><td>清空</td></tr><tr><td>2</td><td> 命令 2&gt; 文件</td><td>将错误输出重定向到一个文件中</td><td>清空</td></tr><tr><td>3</td><td> 命令 &gt;&gt; 文件</td><td>将标准输出重定向到一个文件中</td><td>追加</td></tr><tr><td>4</td><td>命令 2&gt;&gt; 文件</td><td>将错误输出重定向到一个文件中</td><td>追加</td></tr><tr><td>5</td><td> 命令 &gt;&gt; 文件 2&gt;&amp;1<br></td><td>将标准、错误输出共同重定向到一个文件中</td><td>追加</td></tr><tr><td>6</td><td>命令 &amp;&gt;&gt; 文件</td><td>将标准、错误输出共同重定向到一个文件中</td><td>追加</td></tr></table>\n\n4. 案例\n    ~~~bash \n    #----------------------------------------------------\n    #----------- CASE#1 命令 > 文件\n    # 将 clear 的帮助文档输出到 a.txt\n    man clear > a.txt\n    \n    # 打印 a.txt 的内容\n    # clear(1)                                                              clear(1)\n    # NAME\n    #        clear - clear the terminal screen\n    #\n    # SYNOPSIS\n    #       clear\n    #\n    # DESCRIPTION\n    #       clear clears your screen if this is possible.  It looks in the environ-\n    #       ment for the terminal type and then in the terminfo database to  figure\n    #       out how to clear the screen.\n    cat a.txt\n\n    #----------------------------------------------------\n    #-----------  CASE#2 > 和 >>\n    echo \"Test Redirection Symbol >\" > a.txt\n    # Test Redirection Symbol >\n    cat a.txt\n    echo \"Test Redirection Symbol >\" > a.txt\n    # Test Redirection Symbol >\n    cat a.txt    \n    \n    echo \"Test Redirection Symbol >>\" >> a.txt\n    # Test Redirection Symbol >>\n    cat a.txt\n    echo \"Test Redirection Symbol >>\" >> a.txt\n    # Test Redirection Symbol >>\n    # Test Redirection Symbol >>\n    cat a.txt\n\n    #----------------------------------------------------\n    #----------- CASE#3 > 和 2>\n    # 设定：目录 a 存在，目录 b 不存在\n    ls -l  a > res.txt\n    ls -l b > res.txt\n    # total 22104\n    # -rw-r--r--@  1 root  *  5310310  6  6 16:30 a.png\n    # -rw-r--r--@  1 root  *    58375 11 10  2017 b.jpg\n    cat res.txt\n    \n    #----------------------------------------------------\n    #----------- CASE#4 输入重定向 <\n    # a\n    cat a.txt\n    # 1\n    wc -c < a.txt\n    ~~~\n\n### 管道命令符\n- 格式：`命令 A | 命令 B | …… | 命令 N`\n- 作用：把前一个命令原本要输出到屏幕的标准正常数据当做是下一个命令的标准输入\n\n### 命令行的通配符（略）\n~~~bash\n#-r-sr-xr-x  1 root  wheel  83664  7  4 19:02 /usr/bin/at\n#-rwxr-xr-x  1 root  wheel  70960  7  4 19:03 /usr/bin/atos\n#-r-sr-xr-x  1 root  wheel  83664  7  4 19:01 /usr/bin/atq\n#-r-sr-xr-x  1 root  wheel  83664  7  4 19:03 /usr/bin/atrm\n#-rwxr-xr-x  1 root  wheel  28912  7  4 19:02 /usr/bin/atsutil\nls -l /usr/bin/at*\n\n#-rwxr-xr-x  1 root  wheel  18288  7  4 19:01 /usr/bin/c89\n#-rwxr-xr-x  1 root  wheel  18288  7  4 19:03 /usr/bin/c99\nls -l /usr/bin/c?9\n~~~\n\n### 常用的转义字符\n- 最常用的四个转义字符\n    - `\\`：反斜杠，转义特殊变量为普通字符串\n    - `'`：单引号，转义其中所有变量为普通字符串\n    - `\"`：保留其中变量属性，不做转义处理\n    - `````：把其中的命令执行后返回结果\n\n- 案例\n    ~~~bash\n    PRICE=5\n    echo \"$PRICE\"\n    echo \"$$PRICE\"\n    echo \"\\$$PRICE\"\n    echo \\$$PRICE'\n    \n    echo `uname -a`\n    ~~~\n\n## 重要的环境变量\n- 命令在 Linux 中的执行步骤：\n\n    1. 判断输入的命令是绝对路径还是相对路径，若是，则直接执行\n    2. 判断输入的命令是否为“别名命令”\n    3. Bash 解释器判断用户输入的是内部命令还是外部命令\n        - 内部命令，解释器内部的命令，输入后直接执行\n        - 外部命令，参照步骤 4\n    4. 系统将在多个路径中查找用户输入的命令文件\n        - 定义这些路径的变量名为 `PATH`\n        - 作用是告诉 Bash 解释器哪些地方可能存放命令文件\n    \n        ~~~bash\n        # /usr/bin:/bin:/usr/sbin:/sbin\n        echo $PATH\n        ~~~\n\n- 常用的系统变量\n\n    <table><tr><th>序号</th><th>变量</th><th>名称</th></tr><tr><td>1</td><td>HOME</td><td>用户的主目录（home 路径）</td></tr><tr><td>2</td><td>SHELL</td><td>用户使用的 shell 解释器名称</td></tr><tr><td>3</td><td>HISTSIZE</td><td>输出的历史命令记录数</td></tr><tr><td>4</td><td>HISTFILESIZE</td><td>保存的历史命令记录数</td></tr><tr><td>5</td><td>MAIL</td><td>邮件保存路劲</td></tr><tr><td>6</td><td>LANG</td><td>系统语言、语系名称</td></tr><tr><td>7</td><td>RANDOM</td><td>生成一个随机数</td></tr><tr><td>8</td><td>PS1</td><td>Bash 解释器的提示符</td></tr><tr><td>9</td><td>PATH</td><td>定义解释器搜索用户执行命令的路径</td></tr><tr><td>10</td><td>EDITOR</td><td>用户默认的文本编辑器</td></tr></table>\n\n## 写在最后\n|版本|内容|时间|\n| :-: | - | - |\n| v1.0.0 | 1. 创建文档<br>2. 第三章阅读笔记草稿 | 2018-09-09 19:18:53 |\n| v1.0.1 | 1. 结束 3.1 章节<br> 2. 增加 3.2 管道命令符<br> 3. 增加 3.4 常用的转义字符 | 2018-09-10 22:59:35 |\n| v1.0.2 | 1. 结束 3.5 章节 | 2018-09-18 21:54:44 |\n","tags":["技术","Linux"],"categories":["阅读"]},{"title":"《Linux就该这么学》第二章","url":"/2018/09/04/4336.html","content":"\n## 新手必须掌握的 Linux 命令\n\n### Shell\n\n1. 主流 Linux 默认终端是 Bash，优点如下：\n   - 命令执行历史; \n   - 命令或参数 Tab 补全; \n   - 批处理脚本;\n   - 环境变量功能。\n\n### 帮助命令\n\n1. 标准格式：`命令名称 [命令参数] [命令对象]`\n   \n   - 长格式：`man --help`\n   - 短格式：`man -h`\n\n2. 查看命令帮助 `man 命令`，如`man ping`、`man man`\n\n### 常用工作命令\n\n<!--more-->\n\n#### ***echo***\n\n- 格式：`echo [字符串 | $变量]`\n\n- 作用：输入信息\n  \n  ```bash\n    echo string\n    echo $SHELL\n    echo \"content\" >> file\n  ```\n\n#### ***reboot***\n\n- 格式：`reboot`\n\n- 作用：重启系统\n  \n  ```bash\n    # 涉及硬件管理权限，需要 root 权限\n    reboot\n  ```\n\n#### ***poweroff***\n\n- 格式：`poweroff`\n\n- 作用：关闭系统\n  \n  ```bash\n    # 涉及硬件管理权限，需要 root 权限\n    poweroff\n  ```\n\n#### ***date***\n\n- 格式：`date [选项] [+指定的格式]`\n- 作用：查看时间\n- 参数：\n\n| 序号  | 参数  | 作用     |\n|:---:| --- | ------ |\n| 1   | %t  | Tab    |\n| 2   | %H  | 24时制   |\n| 3   | %I  | 12时制   |\n| 4   | %M  | 分钟     |\n| 5   | %S  | 秒      |\n| 6   | %j  | 今年中第几天 |\n\n```bash\n# 2018年 9月 4日 星期二 22时28分33秒 CST\ndate\n# 2018-09-04 22:29:13\ndate \"+%Y-%m-%d %H:%M:%S\"\n# 设置系统时间\ndate -s \"20170901 8:30:00\"\n# 查看今天是当年第几天\ndate \"+%j\"\n```\n\n#### ***wget***\n\n- 格式：`wget [参数] 下载地址`\n- 作用：下载网络文件\n- 参数：\n\n| 序号  | 参数  | 作用       |\n|:---:| --- | -------- |\n| 1   | -b  | 后台下载模式   |\n| 2   | -P  | 下载到指定目录  |\n| 3   | -t  | 最大重试次数   |\n| 4   | -c  | 断点续传     |\n| 5   | -p  | 下载页面所有资源 |\n| 6   | -r  | 递归下载     |\n\n```bash\nwget http://www.linuxprobe.com/docs/LinuxProbe.pdf\nwget -r -p http://www.linuxprobe.com\n```\n\n#### ***ps***\n\n- 格式：`ps [参数]`\n- 作用：查看系统进程状态\n- 参数：\n\n| 序号  | 参数  | 作用                |\n|:---:| --- | ----------------- |\n| 1   | -a  | 显示包含其他用户进程在内的所有进程 |\n| 2   | -u  | 用户及其他详细信息         |\n| 3   | -x  | 显示没有控制终端的进程       |\n\n进程状态：\n\n|序号|状态|说明||\n| :-: | - | - |\n| 1 | R(运行) | 进程正在运行或处于运行队列 |\n| 2 | S(中断) | 进程休眠中，等待合适条件唤醒 |\n| 3 | D(不可终止) | 进程不响应系统异步信号，kii 命令也无法终端 |\n| 4 | Z(僵死) | 进程终止，但是描述符依然存在，直至父进程调用 wat4() 后释放 |\n| 5 | T(停止) | 进程收到停止信号后终止运行 |\n\n```bash\n# ps 支持系统繁多，所以参数非常多\nps -a\n```\n\n#### ***top***\n\n- 格式：`top`\n\n- 作用：动态地监视进程活动和系统负载\n  \n  ```bash\n    # load avg，三个数值分别为 1 分钟、5 分钟、15 分钟内的平均值，数值越小意味着负载越低\n    top\n  ```\n\n#### ***pidof***\n\n- 格式：`pidof [参数] [服务名称]`\n\n- 作用：查询某个指定服务进程的 PID 值\n  \n  ```bash\n    # pid\n    pidof sshd\n  ```\n\n#### ***kill***\n\n- 格式：`kill [参数] [进程 PID]`\n\n- 作用：终止某个指定 PID 的服务进程\n  \n  ```bash\n    kill -9 xxx\n  ```\n\n#### ***killall***\n\n- 格式：`killall [参数] [进程 PID]`\n\n- 作用：终止某个指定名称的服务所对应的全部进程\n  \n  ```bash\n    # 大型的软件会多个进程协同为用户提供服务，逐个结束会很麻烦。\n    killall httpd\n  ```\n\n### 系统状态监测命令\n\n#### ***ifconfig***\n\n- 格式：`ifconfig [网络参数] [参数]`\n\n- 作用：获取网卡配置与网络状态\n  \n  ```bash\n    ifconfig\n  ```\n\n#### ***uname***\n\n- 格式：`uname [-a]`\n\n- 作用：查看系统内核与系统版本\n  \n  ```bash\n    # Linux centos-linux.shared 3.10.0-862.el7.x86_64 \n    # #1 SMP Fri Apr 20 16:44:24 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n    uname -a\n  ```\n\n#### ***uptime***\n\n- 格式：`uptime`\n\n- 作用：查看系统敷在信息，显示当前系统时间、已运行时间、启用终端数、平均负载信息\n  \n  ```bash\n    # 01:08:44 up 15:49,  4 users,  load average: 0.08, 0.04, 0.05\n    uptime\n  ```\n\n#### ***free***\n\n- 格式：`free [-h]`\n\n- 作用：查看当前系统中内存的使用量信息\n  \n  ```bash\n    #        total   used   free   shared  buff/cache   available\n    # Mem:    1.8G   1.2G   111M     4.5M        480M        354M\n    # Swap:   2.0G    48M   2.0G\n    free -h\n  ```\n\n#### ***who***\n\n- 格式：`who [参数]`\n\n- 作用：查看当前登入主机的用户终端信息\n  \n  ```bash\n    # root     tty1         2018-08-17 11:55\n    # root     pts/0        2018-08-20 23:32 (10.*.*.2)\n    who\n  ```\n\n#### ***last***\n\n- 格式：`last [参数]`\n\n- 作用：查看所有系统的登录记录\n  \n  ```bash\n    # root     pts/0        10.*.*.2         Fri Aug 17 11:59 - 11:59  (00:00)\n    # root     pts/0        10.*.*.2         Fri Aug 17 11:57 - 11:58  (00:00)\n    # root     tty1                          Fri Aug 17 11:55   still logged in\n    # reboot   system boot  3.10.0-862.el7.x Fri Aug 17 11:55 - 01:15 (3+13:20)\n    last\n  ```\n\n#### ***history***\n\n- 格式：`history [-c]`\n\n- 作用：用于显示历史执行过的命令\n\n- **注意**：\n  \n  - 可以用`!数字`的命令格式重复执行某一次的命令记录，从而避免了重复输入较长\n    命令的麻烦。 \n    \n    ```bash\n    # 1  history\n    # 2  vi /etc/profile\n    # 3  sosreport\n    # ……\n    history\n    \n    # !数字 重复执行，!1 同 history \n    !1 \n    \n    # -c 参数会清空所有的历史记录\n    # 默认记录1000条，如果不够的，修改 `/etc/profile` 文件中的 `HISTSIZE`\n    history -c\n    ```\n\n#### ***sosreport***\n\n- 格式：`sosreport`\n\n- 作用：收集系统配置以及架构信息，并输出诊断文档，格式为`sosreport`\n\n- **注意**：精简化安装的 Centos 7.5 中没有该指令，请执行 `yum -y install sos`\n\n- 参考：[github  sos](https://github.com/sosreport/sos)\n  \n  ```bash\n    sosreport\n  ```\n\n### 工作目录切换命令\n\n#### ***pwd***\n\n- 格式：`pwd [选项]`\n\n- 作用：显示用户当前所处的工作目录\n  \n  ```bash\n    # /root\n    pwd\n  ```\n\n#### ***cd***\n\n- 格式：`cd [选项]`\n\n- 作用：切换工作路径\n  \n  ```bash\n    cd ~\n  ```\n\n#### ***ls***\n\n- 格式：`ls [选项]文件`\n\n- 作用：显示目录中的文件信息\n  \n  ```bash\n    ls -ld /etc\n    ls -la\n  ```\n\n### 文本文件编辑命令\n\n#### ***cat***\n\n- 格式：`cat [选项]文件`\n\n- 作用：用于查看内容较少的纯文本\n  \n  ```bash\n    # -n 参数显示行号\n    cat -n  xxx.txt\n  ```\n\n#### ***more***\n\n- 格式：`more [选项]文件`\n\n- 作用：用于查看内容较多的纯文本，会提示百分比\n  \n  ```bash\n    more xxx.txt\n  ```\n\n#### ***head***\n\n- 格式：`head [选项]文件`\n\n- 作用：用于查看纯文本文档的前 N 行\n  \n  ```bash\n    # -n 表示想查看的行数\n    head -n 20  xxx.txt\n  ```\n\n#### ***tail***\n\n- 格式：`tail [选项]文件`\n\n- 作用：用于查看纯文本文档的后 N 行，或是持续刷新内容\n\n- 备注：tail 是尾巴的意思\n  \n  ```bash\n    # -f 显示文件最新追加的内容\n    tail -f xxx.txt\n  \n    # -n 显示文件后 20 行的代码\n    tail -n  20 xxx.txt\n  ```\n\n#### ***tr***\n\n- 格式：`tr [原始字符][目标字符]`\n\n- 作用：批量替换文本中的一些词汇\n  \n            ```bash 案例 http://man.linuxde.net/tr tr\n            # 先用 cat 读出待处理文本，然后通过管道符号传递给 tr 命令进行批量操作。\n            # 将小写的英文字母替换为大写的\n            cat xxx.txt | tr [a-z] [A-Z]\n            ```\n\n#### ***wc***\n\n- 格式：`wc [参数][文本]`\n- 作用：w(ord) c(ount)，统计指定文本的行数、字数、字节数\n- 参数：\n\n| 序号  | 参数  | 作用     |\n|:---:| --- | ------ |\n| 1   | -l  | 只显示行数  |\n| 2   | -w  | 只显示单词数 |\n| 3   | -c  | 只显示字节数 |\n\n```bash\n# 24 /etc/passwd\nwc -l /etc/passwd\n\n# 34 /etc/passwd\nwc -w /etc/passwd\n\n# 1089 /etc/passwd\nwc -c /etc/passwd\n```\n\n#### ***stat***\n\n- 格式：`stat [文件名称]`\n\n- 作用：查看文件的具体纯属信息和时间信息\n  \n  ```bash\n    # 文件：\"/etc/passwd\"\n    # 大小：1089              块：8              IO 块：4096   普通文件\n    # 设备：fd00h/64768d        Inode：68774316    硬链接：1\n    # 权限：(0644/-rw-r--r--)    Uid：(0/root)      Gid：(0/root)\n    # 环境：system_u:object_r:passwd_file_t:s0\n    #\n    # 最近访问：2018-08-20 11:44:02.732356792 +0800\n    # 最近更改：2018-08-20 11:44:02.305369253 +0800\n    # 最近改动：2018-08-20 11:44:02.306369224 +0800\n    # 创建时间：-\n    stat /etc/passwd\n  ```\n\n#### ***cut***\n\n- 格式：`cut [参数] 文本`\n\n- 作用：按列提取文本字符\n  \n  ```bash\n    # 按行提取\n    # root:x:0:0:root:/root:/bin/bash\n    # bin:x:1:1:bin:/bin:/sbin/nologin\n    head -n 2 /etc/passwd\n  \n    # 按列提取\n    # root\n    # bin\n    # daemon\n    # ……\n    cut -d: -f1 /etc/passwd\n  ```\n\n#### ***diff***\n\n- 格式：`diff [参数] 文件`\n\n- 作用：用于比较多个文本文件的差异\n\n- **注意**：笔者虚拟机上（Centos 7.5 精简安装）没有成功，读者自行测试（2018-09-09 16:14:18）\n  \n  ```bash\n    # 直接显示比较后的结果，判断文件是否相同\n    diff --brief diff_A.txt diff_B.txt\n  \n    # 查看内容对比的具体不同\n    diff -c diff_A.txt diff_B.txt\n  ```\n\n### 文件目录管理命令\n\n#### ***touch***\n\n- 格式：`touch [选项]文件名`\n- 作用：创建空白文件或设置文件的时间\n- 参数：\n\n| 序号  | 参数  | 作用                 |\n|:---:| --- | ------------------ |\n| 1   | -a  | 仅修改‘读取时间’ （atime）  |\n| 2   | -m  | 仅修改‘修改时间’ （mtime）  |\n| 3   | -d  | 同时修改 atime 和 mtime |\n\n```bash\ntouch a.txt\n# -rw-r--r--. 1 root root    0 8月  21 02:55 a.txt\nls -l \ntouch -d \"2017-05-04 15:44\" a.txt\n# -rw-r--r--. 1 root root    0 5月   4 2017 a.txt\nls -l\n```\n\n#### ***mkdir***\n\n- 格式：`mkdir [选项]目录`\n\n- 作用：创建空白目录\n  \n  ```bash\n    mkdir path\n    # -p 递归创建具有嵌套层级关系的文件目录\n    mkdir -p pathA/pathB/pathC\n  ```\n\n#### ***cp***\n\n- 格式：`cp [选项] 源文件 目标文件`\n- 作用：复制文件或是目录\n- **注意**：\n  - 目标是`目录`，会将文件复制到该目录下\n  - 目标是`普通文件`，询问是否覆盖\n  - 目标`不存在`，正常复制操作\n- 参数：\n\n| 序号  | 参数  | 作用                         |\n|:---:| --- | -------------------------- |\n| 1   | -p  | 保留原始文件属性                   |\n| 2   | -d  | 若对象为 `链接文件`，则保留 `链接文件` 的属性 |\n| 3   | -r  | 递归持续复制（目录复制）               |\n| 4   | -i  | 如果目标文件存在则询问是否覆盖            |\n| 5   | -a  | 相当于 -pdr                   |\n\n```bash\n# 复制 a.txt 到上一层目录\ncp a.txt ../\n\n# 迭代复制目录 a 中的内容，且不询问是否覆盖\n\\cp -r a/ ../\n```\n\n#### ***mv***\n\n- 格式：`mv [选项] 源文件 [目标路径|目标文件名]`\n\n- 作用：剪切文件或是目录，可用于`重命名操作`\n  \n  ```bash\n    # 重命名\n    mv a.txt b.txt\n  ```\n\n#### ***rm***\n\n- 格式：`rm [选项] 源文件 [目标路径|目标文件名]`\n\n- 作用：用于删除文件或目录\n  \n  ```bash\n    # 删除文件\n    rm -f a.txt\n    # 删除目录\n    rm -rf a/\n  ```\n\n#### ***dd***\n\n- 格式：`dd [参数]`\n- 作用：按照制定大小和个数的数据块来复制或转换文件\n- **注意**：\n  - Linux 下存在一个文件`/dev/zero`，本身不占用存储空间，却可以作为 dd 的输入文件，来生成指定大小的文件 \n- 参数：\n\n| 序号  | 参数    | 作用      |\n|:---:| ----- | ------- |\n| 1   | if    | 输入的文件名称 |\n| 2   | of    | 输出的文件名称 |\n| 3   | bs    | 设置块的大小  |\n| 4   | count | 设置块的个数  |\n\n```bash\n# 记录了10+0 的读入\n# 记录了10+0 的写出\n# 83886080字节(84 MB)已复制，0.056487 秒，1.5 GB/秒\ndd if=/dev/zero of=10_8_file count=10 bs=8M\n\n# -rw-r--r--. 1 root root  80M 8月  21 03:16 10_8_file\nls -lh\n```\n\n```bash\ndd if=/dev/cdrom of=xxx.iso\n```\n\n#### ***file***\n\n- 格式：`file 文件名`\n\n- 作用：用于查看文件类型\n  \n  ```bash\n    # anaconda-ks.cfg: ASCII text\n    file anaconda-ks.cfg\n  \n    # /dev/cdrom: symbolic link to `sr0'\n    file /dev/cdrom\n  ```\n\n### 打包压缩与搜索命令\n\n#### ***tar***\n\n- 格式：`tar [选项] [文件|目录]`\n- 作用：对文件或目录进行压缩或解压\n- **注意**：\n  - `.tar`、`.tar.gz`、`.tar.bz2` 格式都是 tar 命令打出的\n  - 参数`-c`、`-x` 不能同时使用\n  - 参数`-f` 需放置在所有参数的最后\n  - 常用压缩：`tar -czvf file.tar.gz`\n  - 常用解压：`tar -xzvf file.tar.gz`\n- 参数：\n\n| 序号  | 参数  | 作用             |\n|:---:| --- | -------------- |\n| 1   | -c  | 创建压缩文件         |\n| 2   | -x  | 解压缩文件          |\n| 3   | -t  | 查看压缩包内有哪些文件    |\n| 4   | -z  | 使用 Gzip 压缩或解压  |\n| 5   | -j  | 使用 bzip2 压缩或解压 |\n| 6   | -v  | 显示压缩或解压的郭晨     |\n| 7   | -f  | 目标文件名          |\n| 8   | -p  | 保留原始的权限与属性     |\n| 9   | -P  | 使用据对路径来压缩      |\n| 10  | C   | 指定解压到的目录       |\n\n```bash\n# 压缩\ntar -czvf etc.tar.gz /etc/\n# 解压，-C 执行解压到的路径\ntar -czvf etc.tar.gz -C ./etc/\n```\n\n#### ***grep***\n\n- 格式：`grep [选项] 文件`\n- 作用：在文本中执行关键词搜索，并显示匹配的结果\n- **注意**：\n  - 最常用的两个参数`-n`、`-v`\n- 参数：\n\n| 序号  | 参数  | 作用                           |\n|:---:| --- | ---------------------------- |\n| 1   | -b  | 将可执行（binary）文件作为文本（text）文件搜索 |\n| 2   | -c  | 显示找到的行数                      |\n| 3   | -i  | 忽略大小写                        |\n| 4   | -n  | 显示行号                         |\n| 5   | -v  | 反向选择，列出没有`关键词`的行             |\n\n```bash\n# 2:bin:x:1:1:bin:/bin:/sbin/nologin\n# 3:daemon:x:2:2:daemon:/sbin:/sbin/nologin\n# 4:adm:x:3:4:adm:/var/adm:/sbin/nologin\n# ……\ngrep /sbin/nologin /etc/passwd\n```\n\n#### ***find***\n\n- 格式：`find [查找路径] 条件 操作`\n- 作用：在文本中执行关键词搜索，并显示匹配的结果\n- **注意**：\n  - Linux 中一切皆文件，也就是说，一般的搜索工作都是 find 完成的\n- 参数：\n\n| 序号  | 参数                       | 作用                                                 |\n|:---:| ------------------------ | -------------------------------------------------- |\n| 1   | -name                    | 匹配名称                                               |\n| 2   | -perm                    | 匹配权重（mode 完全匹配，-mode 包含即可）                         |\n| 3   | -user                    | 匹配所有者                                              |\n| 4   | -group                   | 匹配所有组                                              |\n| 5   | -mtime ±n                | 匹配修改内容的时间<br>（-n天以内，+n天以前）                         |\n| 6   | -atime ±n                | 匹配日访问文件的时间<br>（-n天以内，+n天以前）                        |\n| 7   | -ctime ±n                | 匹配修改文件权限的时间<br>（-n天以内，+n天以前）                       |\n| 8   | -nouser                  | 匹配无所有者的文件                                          |\n| 9   | -nogroup                 | 匹配无所有组的文件                                          |\n| 10  | -newer f1 !f2            | 匹配比文件 f1 新，但是比文件 f2 旧的文件                           |\n| 11  | --type <br> /b/d/c/p/l/f | 匹配文件的类型<br>（字母依次表示：设备、目录、字符设备、管道、链接文件、文本文件）        |\n| 12  | -size ±n KB              | 匹配文件大小<br>（+50KB表示超过 50KB 的文件，-50KB 表示小于 50KB 的文件） |\n| 13  | -prune                   | 目录忽略                                               |\n| 14  | -exec ··· {}\\;           | 进一步处理搜索结果的命令                                       |\n\n```bash\n# 搜索 etc 目录下，名字包含 host 的文件\n# /etc/host.conf\n# /etc/hosts\n# ……\nfind /etc -name \"host*\" -print\n```\n\n```bash\n# 搜索 etc 目录下，名字包含 host 的文件，并存储结果\nfind /etc -name \"host*\" -exec cp -a {} /root/findresult/ \\;\n```\n\n## 写在最后\n\n| 版本     | 内容                                             | 时间                  |\n|:------:| ---------------------------------------------- | ------------------- |\n| v1.0.0 | 1. 创建文档<br>2. 完成1.4章节前的笔记                      | 2018-09-04 23:20:27 |\n| v1.0.1 | 1. 完成剩下的章节内容笔记<br>2. 修改错别字若干<br>3. 修改内容先后，调整板式 | 2018-09-09 17:31:46 |\n","tags":["技术","Linux"],"categories":["阅读"]},{"title":"《Linux就该这么学》第一章","url":"/2018/09/04/32906.html","content":"\n## 部署虚拟环境安装 Linux 系统\n### RPM 与 Yum 软件仓库\nRPM 能够完成依赖关系检查，为了解决源码安装的复杂依赖关系而诞生。\n\n目前采用该方案的有：CentOS、Fedora、openSUSE\n\nYum 软件仓库可以根据用户的要求分析出所需软件包及其相关的依赖关系，然后自动从服务器下载软件包并安装到系统。\n\n<!-- more -->\n### systemctl 命令\n用以管理服务。 \n\n**Tips:** `foo.service` 中的 `.service` 可以省略。\n           \n| 序号 | 命令 | 说明 |\n| :-: | - | - |\n| 1 | systemctl start foo.service | 启动服务 |\n| 2 | systemctl restart foo.service | 重启服务 |\n| 3 | systemctl stop foo.service  | 停止服务 |\n| 4 | systemctl reload foo.service | 不终止服务的情况下重载配置 |\n| 5 | systemctl start foo.service | 查看服务状态 |\n| 6 | systemctl enable foo.service | 开机启动 |\n| 7 | systemctl disable foo.service | 禁止开机启动 |\n| 8 | systemctl is-enabled foo.service | 检查特定服务是否开机启动 |\n| 9 | systemctl list-unit-files --type=service | 查看各个级别下服务的启动、禁用情况 |\n\n## 写在最后\n|版本|内容|时间|\n| :-: | - | - |\n| v1.0.0 | 1. 创建文档<br>2. 完成该章笔记 | 2018-09-04 23:20:27 |\n","tags":["技术","Linux"],"categories":["阅读"]},{"title":"《Linux就该这么学》初始篇","url":"/2018/09/04/9572.html","content":"\n## 背景\n\n针对[《LINUX就该这么学》](http://www.linuxprobe.com/docs/LinuxProbe.pdf)一书的读书笔记\n\n系统版本：Centos 7.5\n成文时间：2018-09-04 至 2018-??-??\n\n> ***PS：***\n> 　请注意文章 **时效性** 和 **系统版本** ，哪里不会点哪里。\n\n## 笔记列表\n\n<!-- more -->\n\n- [第〇章 初始篇](#)\n- [第一章 部署虚拟环境安装 Linux 系统](../../../../2018/09/04/32906.html)\n- [第二章 新手必须掌握的 Linux 命令](../../../../2018/09/04/4336.html)\n- [第三章 管道符、重定向与环境变量](../../../../2018/09/09/7305.html)\n- [第四章 Vim 编辑器与 Shell 命令脚本](../../../../2018/09/18/29256.html)\n- [第五章 用户身份与文件权限](../../../../2018/10/13/45302.html) \n- [第六章 存储结构与磁盘划分](../../../../2018/10/22/63727.html)\n- [第七章 存储结构与磁盘划分](#) <small>*进行中……*</small>\n\n## ***参考资料***\n\n1. [Linux 命令大全](http://man.linuxde.net)\n2. <a href=\"https://wiki.archlinux.org/index.php/Main_page_(简体中文)\" target=\"_blank\" rel=\"noopener\">Main page (简体中文)</a>\n3. [Shell 脚本调试的三种方式](https://blog.csdn.net/hanbo_112/article/details/53692156)\n4. [sudo 与 visudo 的超细用法说明](http://blog.51cto.com/chenfage/1830424)\n\n## 进度：\n\n| 序号  | 页码       | 章节                        | 时间                  |\n|:---:|:--------:|:------------------------- |:-------------------:|\n| 1   | Page 42  | Chapter 1.5 RPM(红帽软件包管理器) | 2018-09-03 21:18:40 |\n| 2   | Page 58  | Chapter 2.4 系统状态检测命令      | 2018-09-04 23:11:53 |\n| 3   | Page 78  | Chapter 2.8 打包压缩与搜索命令     | 2018-09-09 17:37:54 |\n| 4   | Page 85  | Chapter 3.5 重要的环境变量       | 2018-09-10 23:30:03 |\n| 5   | Page 98  | Chapter 4.1.3 配置网卡信息      | 2018-09-18 23:07:36 |\n| 6   | Page 115 | Chapter 5 用户身份与文件权限       | 2018-10-13 17:22:43 |\n| 7   | Page 133 | Chapter 6 存储结构与磁盘划分       | 2018-10-17 15:54:23 |\n\n## 写在最后\n\n| 版本     | 内容                                            | 时间                  |\n|:------:| --------------------------------------------- | ------------------- |\n| v1.0.0 | 1. 创建文档<br>2. 完成第一章阅读笔记                       | 2018-09-04 23:20:27 |\n| v1.0.1 | 1. 添加当前版块内容<br>2. 完成第二章阅读笔记<br>3. 修改内容先后，调整板式 | 2018-09-09 17:37:06 |\n| v1.0.2 | 1. 添加读书笔记三                                    | 2018-09-10 23:30:30 |\n| v1.0.3 | 1. 完成读书笔记三<br>2. 第四章草稿状态                      | 2018-09-18 21:55:55 |\n| v1.0.4 | 1. 完成读书笔记四<br>2. 第五章草稿状态                      | 2018-10-13 17:20:47 |\n| v1.0.5 | 1. 完成读书笔记五                                    | 2018-10-17 15:54:26 |\n","tags":["技术","Linux"],"categories":["阅读"]},{"title":"项目收集","url":"/2018/09/04/12445.html","content":"\n##### 机器学习\n1. [机器学习 100 天](https://github.com/MachineLearning100/100-Days-Of-ML-Code)\n\n#####  服务端\n1. [学习 Spring Boot 框架](https://github.com/wuyouzhuguli/SpringAll)\n<!-- more -->\n\n#####  移动端\n1. [暂无](#)\n\n#####  前端\n1. [暂无](#)\n","tags":["开源","Github"],"categories":["技术"]},{"title":"片断·09042018","url":"/2018/09/04/3315.html","content":"\n好羡慕那些活得很舒展的人啊。\n\n我不行。我太拧巴了。没办法喜欢自己，也没办法有耐心。皱巴巴的，像一张心烦意乱的时候被揉烂了的纸。\n\n害怕人群，但又想要被喜欢。总之别扭极了，翻来覆去，也找不到一个适合自己活着的姿势。\n\n<!-- more -->\n觉得自己糟透了。\n","tags":["个人","文字"],"categories":["情感"]},{"title":"2018 书单","url":"/2018/08/31/55698.html","content":"### 在阅目录\n| 序号 | 书名 | 作者 | 类型 | 开始日期 | 结束日期 |\n| :--: | --- | --- | ---- | ------ | ------- |\n| 1 | LINUX 就该这么学 | 刘遄 | Linux | 2018-09-04 | - |\n| 2 | 精灵宝钻 | J.R.R. 托尔金 | 魔幻 | 2018-04-23 | - |\n\n### 备阅目录\n| 序号 | 书名 | 作者 | 类型 | 开始日期 | 结束日期 |\n| :--: | --- | --- | ---- | ------ | ------- |\n| 1  | 布道之道: 引领团队拥抱技术创新 | Terrence Ryan | 管理 | - | - |\n| 2  | 江湖丛谈 | 连阔如 | 杂谈 | - | - |\n\n<!-- more -->\n### 已读目录\n| 序号 | 书名 | 作者 | 类型 | 开始日期 | 结束日期 |\n| :--: | --- | --- | ---- | ------ | ------- |\n| 1 | 天才向左，疯子向右 | Kay Redfield Jamison | 心理 | - | - |\n| 2  | 肖申克的救赎 | 斯蒂芬·金 | 小说 | - | - |\n| 3  | 1988：我想和这个世界谈谈 | 韩寒 | 小说 | - | - |\n| 4 | 达芬奇密码 | 丹·布朗 | 小说 | - | - |\n| 5  | 风语 | 麦家 | 解密 | - | - |\n| 6  | 活着 | 余华 | 小说 | - | - |\n| 7 | 安卓群英传 | 徐宜生 | 技术 | - | - |\n| 8  | 夜谭十记：让子弹飞 | 马识途<br>姜文 | 小说 | - | - |\n| 9  | 给孩子讲量子力学 | 李淼 | 科普 | 2018-09-03 | 2018-09-03 |\n","tags":["书单"],"categories":["阅读"]}]